import { defineComponent, watch } from 'vue';
import useParentComponentEffect from '../../../hooks/useParentComponentEffect';
import { error, bindEvents } from '../../../utils';

var script = /*#__PURE__*/ defineComponent(Object.assign({
    name: 'BDistrictLayer'
}, { __name: 'index', props: {
        visible: { type: Boolean, required: false, default: true },
        name: { type: String, required: true },
        kind: { type: null, required: false, default: 0 },
        fillColor: { type: String, required: false, default: '#fdfd27' },
        fillOpacity: { type: Number, required: false, default: 1 },
        strokeColor: { type: String, required: false, default: '#231cf8' },
        viewport: { type: Boolean, required: false, default: false },
        onClick: { type: null, required: false },
        onDblclick: { type: null, required: false },
        onRightclick: { type: null, required: false },
        onRightdblclick: { type: null, required: false },
        onMousemove: { type: null, required: false },
        onMouseover: { type: null, required: false },
        onMouseout: { type: null, required: false }
    }, emits: ['initd', 'unload', 'mouseover', 'mouseout', 'click'], setup(__props, { emit: vueEmits }) {
        const props = __props;
        let districtLayer;
        const { ready } = useParentComponentEffect((map) => {
            if (!props.name)
                return error('BDistrictLayer', 'DistrictLayer props.name is required');
            const { visible, name, kind, fillColor, fillOpacity, strokeColor, viewport } = props;
            districtLayer = new BMapGL.DistrictLayer({
                name: `(${name})`,
                kind,
                fillColor,
                fillOpacity,
                strokeColor,
                viewport
            });
            visible && map.addDistrictLayer(districtLayer);
            bindEvents(props, vueEmits, districtLayer);
            watch(() => props.visible, (n) => {
                if (districtLayer) {
                    map[n ? 'addDistrictLayer' : 'removeDistrictLayer'](districtLayer);
                }
            });
            const readyTimeout = setTimeout(() => {
                ready(map, districtLayer);
            }, 400);
            return () => {
                clearTimeout(readyTimeout);
                map.removeDistrictLayer(districtLayer);
            };
        });
        return (_ctx, _cache) => {
            return null;
        };
    } }));

script.__file = "packages/components/layer/district/index.vue";

export { script as default };
