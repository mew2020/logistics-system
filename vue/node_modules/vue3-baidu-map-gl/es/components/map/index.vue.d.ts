import { PluginsSourceLink, UserPlugins } from '../../utils/pluginLoader';
import { Callback, type MapType, type Point } from '../../utils';
export interface MapDisplayOptions {
    /**
     * 是否显示地图上的地点标识
     */
    poi?: boolean;
    /**
     * 是否显示室内图
     */
    indoor?: boolean;
    /**
     * 是否显示地图上的地点标识文字
     */
    poiText?: boolean;
    /**
     * 是否显示地图上的地点标识图标
     */
    poiIcon?: boolean;
    /**
     * 是否显示覆盖物
     */
    overlay?: boolean;
    /**
     * 是否显示叠加图层，地球模式暂不支持
     */
    layer?: boolean;
    /**
     * 是否显示3D建筑物（仅支持WebGL方式渲染的地图）
     */
    building?: boolean;
    /**
     * 是否显示路网（只对卫星图和地球模式有效）
     */
    street?: boolean;
    /**
     * 天空颜色
     */
    skyColors?: [string, string];
}
export interface MapProps {
    /**
     * api key
     */
    ak?: string;
    /**
     * 自建 api url, 一般用于离线地图
     */
    apiUrl?: string;
    /**
     * 地图显示宽度
     */
    width?: string | number;
    /**
     * 地图显示高度
     */
    height?: string | number;
    /**
     * 中心点坐标
     */
    center?: string | Point;
    /**
     * 地图类型
     */
    mapType?: MapType;
    /**
     * 缩放级别
     */
    zoom?: number;
    heading?: number;
    tilt?: number;
    /**
     * 地图允许展示的最小级别
     */
    minZoom?: number;
    /**
     * 地图允许展示的最大级别
     */
    maxZoom?: number;
    /**
     * 禁用缩放动画
     */
    noAnimation?: boolean;
    /**
     * 个性化地图
     */
    mapStyleId?: string;
    mapStyleJson?: {
        featureType: string;
        elementType: string;
        stylers: {
            visibility: string;
            color: string;
        };
    }[];
    /**
     * 是否显示室内图控件
     */
    showControls?: boolean;
    /**
     * 插件
     */
    plugins?: UserPlugins;
    pluginsSourceLink?: Partial<PluginsSourceLink>;
    /**
     * 地图自定义属性
     */
    displayOptions?: MapDisplayOptions;
    /**
     * 是否限制中心
     */
    restrictCenter?: boolean;
    /**
     * 是否启用路况图层
     */
    enableTraffic?: boolean;
    /**
     * @default true
     * 启用地图拖拽，默认启用
     */
    enableDragging?: boolean;
    /**
     * @default false
     * 启用地图惯性拖拽，默认禁用
     */
    enableInertialDragging?: boolean;
    /**
     * @default true
     * 	允许地图可被鼠标滚轮缩放，默认开启
     */
    enableScrollWheelZoom?: boolean;
    /**
     * 开启双击平滑缩放效果
     */
    enableContinuousZoom?: boolean;
    /**
     * 开启图区resize中心点不变
     */
    enableResizeOnCenter?: boolean;
    /**
     * 启用地图双击缩放，左键双击放大、右键双击缩小
     */
    enableDoubleClickZoom?: boolean;
    /**
     * @default false
     * 启用键盘操作，默认禁用。
     * 键盘的上、下、左、右键可连续移动地图。
     * 同时按下其中两个键可使地图进行对角移动。
     * PgUp、PgDn、Home和End键会使地图平移其1/2的大小。
     * +、-键会使地图放大或缩小一级
     */
    enableKeyboard?: boolean;
    /**
     * 启用双指缩放地图。
     */
    enablePinchToZoom?: boolean;
    /**
     * @default true
     * 启用自动适应容器尺寸变化，默认启用
     */
    enableAutoResize?: boolean;
    /**
     * 是否启用底图可点击
     */
    enableIconClick?: boolean;
    /**
     * 加载背景图颜色
     */
    loadingBgColor?: string;
    /**
     * 加载文字图颜色
     */
    loadingTextColor?: string;
    /**
     * 地图背景颜色 rgba 数组
     * @default  [245, 245, 245, 100]
     */
    backgroundColor?: number[];
    onClick?: Callback;
    onDblclick?: Callback;
    onRightclick?: Callback;
    onRightdblclick?: Callback;
    onMaptypechange?: Callback;
    onMousemove?: Callback;
    onMouseover?: Callback;
    onMouseout?: Callback;
    onMovestart?: Callback;
    onMoving?: Callback;
    onMoveend?: Callback;
    onZoomstart?: Callback;
    onZoomend?: Callback;
    onAddoverlay?: Callback;
    onAddcontrol?: Callback;
    onRemovecontrol?: Callback;
    onRemoveoverlay?: Callback;
    onClearoverlays?: Callback;
    onDragstart?: Callback;
    onDragging?: Callback;
    onDragend?: Callback;
    onAddtilelayer?: Callback;
    onRemovetilelayer?: Callback;
    onLoad?: Callback;
    onResize?: Callback;
    onHotspotclick?: Callback;
    onHotspotover?: Callback;
    onHotspotout?: Callback;
    onTilesloaded?: Callback;
    onTouchstart?: Callback;
    onTouchmove?: Callback;
    onTouchend?: Callback;
    onLongpress?: Callback;
}
declare function setDragging(enableDragging: boolean): void;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<MapProps>, {
    width: string;
    height: string;
    center: () => Point;
    mapType: string;
    zoom: number;
    maxZoom: number;
    minZoom: number;
    heading: number;
    tilt: number;
    restrictCenter: boolean;
    noAnimation: boolean;
    showControls: boolean;
    backgroundColor: () => number[];
    loadingBgColor: string;
    loadingTextColor: string;
    enableTraffic: boolean;
    enableDragging: boolean;
    enableInertialDragging: boolean;
    enableScrollWheelZoom: boolean;
    enableContinuousZoom: boolean;
    enableResizeOnCenter: boolean;
    enableDoubleClickZoom: boolean;
    enableKeyboard: boolean;
    enablePinchToZoom: boolean;
    enableAutoResize: boolean;
}>, {
    getMapInstance: () => BMapGL.Map | null;
    getBaseMapOptions: () => Omit<MapProps, "height" | "width" | "enableDragging" | "center" | "mapType" | "zoom" | "heading" | "tilt" | "minZoom" | "maxZoom" | "noAnimation" | "showControls" | "restrictCenter" | "enableTraffic" | "enableInertialDragging" | "enableScrollWheelZoom" | "enableContinuousZoom" | "enableResizeOnCenter" | "enableDoubleClickZoom" | "enableKeyboard" | "enablePinchToZoom" | "enableAutoResize" | "loadingBgColor" | "loadingTextColor" | "backgroundColor"> & {
        width: string | number;
        height: string | number;
        center: string | Point;
        mapType: MapType;
        zoom: number;
        maxZoom: number;
        minZoom: number;
        heading: number;
        tilt: number;
        restrictCenter: boolean;
        noAnimation: boolean;
        showControls: boolean;
        backgroundColor: number[];
        loadingBgColor: string;
        loadingTextColor: string;
        enableTraffic: boolean;
        enableDragging: boolean;
        enableInertialDragging: boolean;
        enableScrollWheelZoom: boolean;
        enableContinuousZoom: boolean;
        enableResizeOnCenter: boolean;
        enableDoubleClickZoom: boolean;
        enableKeyboard: boolean;
        enablePinchToZoom: boolean;
        enableAutoResize: boolean;
    } & {
        readonly enableDragging: boolean;
        readonly noAnimation: boolean;
        readonly showControls: boolean;
        readonly restrictCenter: boolean;
        readonly enableTraffic: boolean;
        readonly enableInertialDragging: boolean;
        readonly enableScrollWheelZoom: boolean;
        readonly enableContinuousZoom: boolean;
        readonly enableResizeOnCenter: boolean;
        readonly enableDoubleClickZoom: boolean;
        readonly enableKeyboard: boolean;
        readonly enablePinchToZoom: boolean;
        readonly enableAutoResize: boolean;
        readonly enableIconClick: boolean;
    };
    resetCenter: () => void;
    setDragging: typeof setDragging;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "pluginReady" | "dblclick" | "rightclick" | "rightdblclick" | "maptypechange" | "mousemove" | "movestart" | "moving" | "moveend" | "zoomstart" | "zoomend" | "addoverlay" | "addcontrol" | "removecontrol" | "removeoverlay" | "clearoverlays" | "dragstart" | "dragging" | "dragend" | "addtilelayer" | "removetilelayer" | "load" | "resize" | "hotspotclick" | "hotspotover" | "hotspotout" | "tilesloaded" | "touchstart" | "touchmove" | "touchend" | "longpress")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "pluginReady" | "dblclick" | "rightclick" | "rightdblclick" | "maptypechange" | "mousemove" | "movestart" | "moving" | "moveend" | "zoomstart" | "zoomend" | "addoverlay" | "addcontrol" | "removecontrol" | "removeoverlay" | "clearoverlays" | "dragstart" | "dragging" | "dragend" | "addtilelayer" | "removetilelayer" | "load" | "resize" | "hotspotclick" | "hotspotover" | "hotspotout" | "tilesloaded" | "touchstart" | "touchmove" | "touchend" | "longpress", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<MapProps>, {
    width: string;
    height: string;
    center: () => Point;
    mapType: string;
    zoom: number;
    maxZoom: number;
    minZoom: number;
    heading: number;
    tilt: number;
    restrictCenter: boolean;
    noAnimation: boolean;
    showControls: boolean;
    backgroundColor: () => number[];
    loadingBgColor: string;
    loadingTextColor: string;
    enableTraffic: boolean;
    enableDragging: boolean;
    enableInertialDragging: boolean;
    enableScrollWheelZoom: boolean;
    enableContinuousZoom: boolean;
    enableResizeOnCenter: boolean;
    enableDoubleClickZoom: boolean;
    enableKeyboard: boolean;
    enablePinchToZoom: boolean;
    enableAutoResize: boolean;
}>>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onDragend?: ((...args: any[]) => any) | undefined;
    onDragstart?: ((...args: any[]) => any) | undefined;
    onLoad?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousemove?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onTouchend?: ((...args: any[]) => any) | undefined;
    onTouchmove?: ((...args: any[]) => any) | undefined;
    onTouchstart?: ((...args: any[]) => any) | undefined;
    onRightclick?: ((...args: any[]) => any) | undefined;
    onRightdblclick?: ((...args: any[]) => any) | undefined;
    onMaptypechange?: ((...args: any[]) => any) | undefined;
    onMovestart?: ((...args: any[]) => any) | undefined;
    onMoving?: ((...args: any[]) => any) | undefined;
    onMoveend?: ((...args: any[]) => any) | undefined;
    onZoomstart?: ((...args: any[]) => any) | undefined;
    onZoomend?: ((...args: any[]) => any) | undefined;
    onAddoverlay?: ((...args: any[]) => any) | undefined;
    onAddcontrol?: ((...args: any[]) => any) | undefined;
    onRemovecontrol?: ((...args: any[]) => any) | undefined;
    onRemoveoverlay?: ((...args: any[]) => any) | undefined;
    onClearoverlays?: ((...args: any[]) => any) | undefined;
    onDragging?: ((...args: any[]) => any) | undefined;
    onAddtilelayer?: ((...args: any[]) => any) | undefined;
    onRemovetilelayer?: ((...args: any[]) => any) | undefined;
    onResize?: ((...args: any[]) => any) | undefined;
    onHotspotclick?: ((...args: any[]) => any) | undefined;
    onHotspotover?: ((...args: any[]) => any) | undefined;
    onHotspotout?: ((...args: any[]) => any) | undefined;
    onTilesloaded?: ((...args: any[]) => any) | undefined;
    onLongpress?: ((...args: any[]) => any) | undefined;
    onPluginReady?: ((...args: any[]) => any) | undefined;
}, {
    height: string | number;
    width: string | number;
    enableDragging: boolean;
    center: string | Point;
    mapType: MapType;
    zoom: number;
    heading: number;
    tilt: number;
    minZoom: number;
    maxZoom: number;
    noAnimation: boolean;
    showControls: boolean;
    restrictCenter: boolean;
    enableTraffic: boolean;
    enableInertialDragging: boolean;
    enableScrollWheelZoom: boolean;
    enableContinuousZoom: boolean;
    enableResizeOnCenter: boolean;
    enableDoubleClickZoom: boolean;
    enableKeyboard: boolean;
    enablePinchToZoom: boolean;
    enableAutoResize: boolean;
    loadingBgColor: string;
    loadingTextColor: string;
    backgroundColor: number[];
}, {}>, {
    loading?(_: {}): any;
    default?(_: {}): any;
}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
declare type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
