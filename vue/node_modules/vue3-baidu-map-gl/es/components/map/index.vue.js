import { defineComponent, ref, getCurrentInstance, computed, onMounted, onUnmounted, provide, openBlock, createElementBlock, unref, Fragment, createElementVNode, normalizeStyle, renderSlot, toDisplayString, createCommentVNode, watch } from 'vue';
import usePubSub from '../../hooks/usePubSub';
import getScriptAsync from '../../utils/getScriptAsync';
import { initPlugins } from '../../utils/pluginLoader';
import { isString, isClient, warn, bindEvents, error, callWhenDifferentValue } from '../../utils';
import { useInstanceId } from '../../hooks';

const _hoisted_1 = ["id"];
var script = /*#__PURE__*/ defineComponent(Object.assign({
    name: 'BMap'
}, { __name: 'index', props: {
        ak: { type: String, required: false },
        apiUrl: { type: String, required: false },
        width: { type: [String, Number], required: false, default: '100%' },
        height: { type: [String, Number], required: false, default: '550px' },
        center: { type: null, required: false, default: () => ({ lat: 39.915185, lng: 116.403901 }) },
        mapType: { type: null, required: false, default: 'BMAP_NORMAL_MAP' },
        zoom: { type: Number, required: false, default: 14 },
        heading: { type: Number, required: false, default: 0 },
        tilt: { type: Number, required: false, default: 0 },
        minZoom: { type: Number, required: false, default: 0 },
        maxZoom: { type: Number, required: false, default: 21 },
        noAnimation: { type: Boolean, required: false, default: false },
        mapStyleId: { type: String, required: false },
        mapStyleJson: { type: Array, required: false },
        showControls: { type: Boolean, required: false, default: false },
        plugins: { type: null, required: false },
        pluginsSourceLink: { type: Object, required: false },
        displayOptions: { type: Object, required: false },
        restrictCenter: { type: Boolean, required: false, default: true },
        enableTraffic: { type: Boolean, required: false, default: false },
        enableDragging: { type: Boolean, required: false, default: true },
        enableInertialDragging: { type: Boolean, required: false, default: true },
        enableScrollWheelZoom: { type: Boolean, required: false, default: false },
        enableContinuousZoom: { type: Boolean, required: false, default: true },
        enableResizeOnCenter: { type: Boolean, required: false, default: true },
        enableDoubleClickZoom: { type: Boolean, required: false, default: false },
        enableKeyboard: { type: Boolean, required: false, default: true },
        enablePinchToZoom: { type: Boolean, required: false, default: true },
        enableAutoResize: { type: Boolean, required: false, default: true },
        enableIconClick: { type: Boolean, required: false },
        loadingBgColor: { type: String, required: false, default: '#f1f1f1' },
        loadingTextColor: { type: String, required: false, default: '#999' },
        backgroundColor: { type: Array, required: false, default: () => [245, 245, 245, 100] },
        onClick: { type: null, required: false },
        onDblclick: { type: null, required: false },
        onRightclick: { type: null, required: false },
        onRightdblclick: { type: null, required: false },
        onMaptypechange: { type: null, required: false },
        onMousemove: { type: null, required: false },
        onMouseover: { type: null, required: false },
        onMouseout: { type: null, required: false },
        onMovestart: { type: null, required: false },
        onMoving: { type: null, required: false },
        onMoveend: { type: null, required: false },
        onZoomstart: { type: null, required: false },
        onZoomend: { type: null, required: false },
        onAddoverlay: { type: null, required: false },
        onAddcontrol: { type: null, required: false },
        onRemovecontrol: { type: null, required: false },
        onRemoveoverlay: { type: null, required: false },
        onClearoverlays: { type: null, required: false },
        onDragstart: { type: null, required: false },
        onDragging: { type: null, required: false },
        onDragend: { type: null, required: false },
        onAddtilelayer: { type: null, required: false },
        onRemovetilelayer: { type: null, required: false },
        onLoad: { type: null, required: false },
        onResize: { type: null, required: false },
        onHotspotclick: { type: null, required: false },
        onHotspotover: { type: null, required: false },
        onHotspotout: { type: null, required: false },
        onTilesloaded: { type: null, required: false },
        onTouchstart: { type: null, required: false },
        onTouchmove: { type: null, required: false },
        onTouchend: { type: null, required: false },
        onLongpress: { type: null, required: false }
    }, emits: [
        'initd',
        'unload',
        'pluginReady',
        'click',
        'dblclick',
        'rightclick',
        'rightdblclick',
        'maptypechange',
        'mousemove',
        'mouseover',
        'mouseout',
        'movestart',
        'moving',
        'moveend',
        'zoomstart',
        'zoomend',
        'addoverlay',
        'addcontrol',
        'removecontrol',
        'removeoverlay',
        'clearoverlays',
        'dragstart',
        'dragging',
        'dragend',
        'addtilelayer',
        'removetilelayer',
        'load',
        'resize',
        'hotspotclick',
        'hotspotover',
        'hotspotout',
        'tilesloaded',
        'touchstart',
        'touchmove',
        'touchend',
        'longpress'
    ], setup(__props, { expose: __expose, emit: vueEmits }) {
        const props = __props;
        const mapContainer = ref();
        let map = null;
        // 是否初始化
        let initd = ref(false);
        const instance = getCurrentInstance();
        const instanceId = useInstanceId();
        // 地图初始化的发布
        const { emit } = usePubSub();
        const width = computed(() => (isString(props.width) ? props.width : `${props.width}px`));
        const height = computed(() => (isString(props.height) ? props.height : `${props.height}px`));
        const shouldRender = isClient && !!instance;
        // 初始化地图
        function init() {
            if (!shouldRender)
                return;
            const { proxy } = instance;
            const ak = props.ak || (proxy && proxy.$baiduMapAk);
            const apiUrl = props.apiUrl || (proxy && proxy.$baiduMapApiUrl);
            if (process.env.NODE_ENV !== 'production') {
                if (!ak && !apiUrl) {
                    return warn('BMap', 'ak or apiUrl is required');
                }
            }
            const plugins = props.plugins && proxy.$baiduMapPlugins
                ? Object.assign(proxy.$baiduMapPlugins, props.plugins)
                : props.plugins || proxy.$baiduMapPlugins;
            const pluginsSourceLink = props.pluginsSourceLink && proxy.$baiduMapPluginsSourceLink
                ? Object.assign(proxy.$baiduMapPluginsSourceLink, props.pluginsSourceLink)
                : props.pluginsSourceLink || proxy.$baiduMapPluginsSourceLink || {};
            const scriptKey = apiUrl || `_initBMap_${ak}`;
            // load sdk
            getScriptAsync({
                src: apiUrl ? apiUrl : `//api.map.baidu.com/api?type=webgl&v=1.0&ak=${ak}&callback=${scriptKey}`,
                addCalToWindow: !apiUrl,
                key: scriptKey,
                exportGetter: () => window.BMapGL
            })
                .then(() => {
                const { restrictCenter, enableIconClick, backgroundColor, minZoom, maxZoom, mapType, enableAutoResize, showControls, center, displayOptions } = props;
                if (!mapContainer.value)
                    return;
                map = new BMapGL.Map(mapContainer.value, {
                    backgroundColor,
                    enableIconClick,
                    restrictCenter,
                    minZoom,
                    maxZoom,
                    mapType: window[mapType],
                    enableAutoResize,
                    showControls,
                    displayOptions
                });
                setCenterAndZoom(center);
                initMapOptions();
                initCustomStyle();
                startWatchProps();
                bindEvents(props, vueEmits, map);
                if (plugins) {
                    initPlugins(plugins, pluginsSourceLink)
                        .then(() => {
                        vueEmits('pluginReady', map);
                    })
                        .catch((err) => {
                        error('BMap', 'plugins error: ' + err);
                    });
                }
                const event = {
                    map,
                    instance,
                    BMapGL: window.BMapGL
                };
                emit(instanceId, event);
                vueEmits('initd', event);
                initd.value = true;
            })
                .catch((e) => error('BMap', e.message));
        }
        // 个性化地图
        function initCustomStyle() {
            if (props.mapStyleId) {
                map.setMapStyleV2({
                    styleId: props.mapStyleId
                });
                return;
            }
            else if (props.mapStyleJson) {
                map.setMapStyleV2({
                    styleJson: props.mapStyleJson
                });
            }
        }
        // 监听props变化
        function startWatchProps() {
            watch(() => props.zoom, setZoom);
            watch(() => props.tilt, setTilt);
            watch(() => props.heading, setHeading);
            watch(() => props.center, callWhenDifferentValue(setCenterAndZoom), {
                deep: true
            });
            watch(() => props.mapStyleId, initCustomStyle);
            watch(() => props.mapStyleJson, callWhenDifferentValue(initCustomStyle), {
                deep: true
            });
            watch(() => props.displayOptions, callWhenDifferentValue(setDisplayOptions), {
                deep: true
            });
            watch(() => props.mapType, setMapType);
            watch(() => props.enableTraffic, setTraffic);
            watch(() => props.enableDragging, setDragging);
            watch(() => props.enableInertialDragging, setInertialDragging);
            watch(() => props.enableScrollWheelZoom, setScrollWheelZoom);
            watch(() => props.enableContinuousZoom, setContinuousZoom);
            watch(() => props.enableResizeOnCenter, setResizeOnCenter);
            watch(() => props.enableDoubleClickZoom, setDoubleClickZoom);
            watch(() => props.enableKeyboard, setKeyboard);
            watch(() => props.enablePinchToZoom, setPinchToZoom);
            watch(() => props.enableAutoResize, setAutoResize);
        }
        // 设置地图属性
        function initMapOptions() {
            const { enableDragging, enableInertialDragging, enableScrollWheelZoom, enableContinuousZoom, enableResizeOnCenter, enableDoubleClickZoom, enableKeyboard, enablePinchToZoom, enableAutoResize, enableTraffic, mapType, zoom, tilt, heading } = props;
            setZoom(zoom);
            setTilt(tilt);
            setTraffic(enableTraffic);
            setHeading(heading);
            setMapType(mapType);
            setKeyboard(enableKeyboard);
            setDragging(enableDragging);
            setAutoResize(enableAutoResize);
            setPinchToZoom(enablePinchToZoom);
            setContinuousZoom(enableContinuousZoom);
            setResizeOnCenter(enableResizeOnCenter);
            setDoubleClickZoom(enableDoubleClickZoom);
            setScrollWheelZoom(enableScrollWheelZoom);
            setInertialDragging(enableInertialDragging);
        }
        // 生产一个地理位置坐标点
        function genPoint(lng, lat) {
            return new BMapGL.Point(lng, lat);
        }
        /**
         * 设置是否显示路况图层
         */
        function setTraffic(enableTraffic) {
            enableTraffic ? map.setTrafficOn() : map.setTrafficOff();
        }
        /**
         * 设置中心点和缩放级别
         */
        function setCenterAndZoom(center) {
            if (typeof center === 'string') {
                map.centerAndZoom(center, props.zoom);
            }
            else {
                map.centerAndZoom(genPoint(center.lng, center.lat), props.zoom);
            }
        }
        /**
         * 设置地图自定义属性
         */
        function setDisplayOptions(displayOptions) {
            map.setDisplayOptions(displayOptions || {});
        }
        /**
         * 设置缩放级别
         */
        function setZoom(zoom) {
            map.setZoom(zoom, {
                noAnimation: props.noAnimation
            });
        }
        // 设置地图类型
        function setMapType(mapType) {
            window[mapType] !== undefined && map.setMapType(window[mapType]);
        }
        function setHeading(heading) {
            map.setHeading(heading);
        }
        function setTilt(tilt) {
            map.setTilt(tilt);
        }
        // 设置地图是否可拖动
        function setDragging(enableDragging) {
            enableDragging ? map.enableDragging() : map.disableDragging();
        }
        // 设置地图惯性拖拽
        function setInertialDragging(enableInertialDragging) {
            enableInertialDragging ? map.enableInertialDragging() : map.disableInertialDragging();
        }
        // 设置地图是否可滚轮缩放
        function setScrollWheelZoom(enableScrollWheelZoom) {
            enableScrollWheelZoom ? map.enableScrollWheelZoom() : map.disableScrollWheelZoom();
        }
        // 设置地图是否可连续缩放
        function setContinuousZoom(enableContinuousZoom) {
            enableContinuousZoom ? map.enableContinuousZoom() : map.disableContinuousZoom();
        }
        // 设置地图是否可缩放至中心点
        function setResizeOnCenter(enableResizeOnCenter) {
            enableResizeOnCenter ? map.enableResizeOnCenter() : map.disableResizeOnCenter();
        }
        // 设置地图是否可双击缩放
        function setDoubleClickZoom(enableDoubleClickZoom) {
            enableDoubleClickZoom ? map.enableDoubleClickZoom() : map.disableDoubleClickZoom();
        }
        // 设置地图是否可键盘操作
        function setKeyboard(enableKeyboard) {
            enableKeyboard ? map.enableKeyboard() : map.disableKeyboard();
        }
        // 设置地图是否可手势缩放
        function setPinchToZoom(enablePinchToZoom) {
            enablePinchToZoom ? map.enablePinchToZoom() : map.disablePinchToZoom();
        }
        // 设置地图是否自动适应窗口大小
        function setAutoResize(enableAutoResize) {
            enableAutoResize ? map.enableAutoResize() : map.disableAutoResize();
        }
        onMounted(init);
        /**
         * 销毁地图，当使用 WebGL 渲染地图时，如果确认不再使用该地图实例，则需要
         * 调用本方法销毁 WebGL 上下文，否则频繁创建新地图实例会导致浏览器报：
         * too many WebGL context 的警告。
         */
        onUnmounted(() => {
            if (map) {
                try {
                    map.destroy();
                }
                catch (e) {
                    error('BMapGL SDK', e.message);
                }
            }
        });
        __expose({
            // 父组件获取map实例方法
            getMapInstance: () => map,
            // 父组件/外部获取map组件 options
            getBaseMapOptions: () => props,
            // 重置地图中心
            resetCenter: () => setCenterAndZoom(props.center),
            // 设置地图是否可拖动
            setDragging
        });
        provide('getMapInstance', () => map);
        provide('baseMapSetCenterAndZoom', (_center) => setCenterAndZoom(_center));
        provide('baseMapSetDragging', (enableDragging) => setDragging(enableDragging));
        provide('getBaseMapOptions', () => props);
        return (_ctx, _cache) => {
            return (openBlock(), createElementBlock("div", { id: unref(instanceId) }, [
                (unref(shouldRender))
                    ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                        createElementVNode("div", {
                            class: "baidu-map-container",
                            ref_key: "mapContainer",
                            ref: mapContainer,
                            style: normalizeStyle([{ width: width.value, height: height.value, background: props.loadingBgColor }, { "position": "relative", "overflow": "hidden" }])
                        }, [
                            renderSlot(_ctx.$slots, "loading", {}, () => [
                                createElementVNode("div", {
                                    style: normalizeStyle([{ color: props.loadingTextColor }, { "position": "absolute", "top": "50%", "left": "50%", "transform": "translate(-50%, -50%)" }])
                                }, toDisplayString(!unref(initd) ? 'map loading...' : ''), 5 /* TEXT, STYLE */)
                            ])
                        ], 4 /* STYLE */),
                        renderSlot(_ctx.$slots, "default")
                    ], 64 /* STABLE_FRAGMENT */))
                    : createCommentVNode("v-if", true)
            ], 8 /* PROPS */, _hoisted_1));
        };
    } }));

script.__file = "packages/components/map/index.vue";

export { script as default };
