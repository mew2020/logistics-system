import { Callback } from '../../utils';
export interface ContextMenuItem {
    text: string;
    callback: (...arg: any[]) => void;
    disabled?: boolean;
}
export declare type ContextMenuSeparator = '-';
export interface ContextMenuProps {
    width?: number;
    /**
     * 是否可见
     */
    visible?: boolean;
    menuItems?: (ContextMenuItem | ContextMenuSeparator)[];
    onOpen?: Callback;
    onClose?: Callback;
}
declare const _default: import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ContextMenuProps>, {
    width: number;
    visible: boolean;
    menuItems: () => never[];
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "open" | "close")[], "initd" | "unload" | "open" | "close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<ContextMenuProps>, {
    width: number;
    visible: boolean;
    menuItems: () => never[];
}>>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
}, {
    width: number;
    visible: boolean;
    menuItems: (ContextMenuItem | "-")[];
}, {}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
declare type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
