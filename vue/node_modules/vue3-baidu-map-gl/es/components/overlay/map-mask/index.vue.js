import { defineComponent, watchPostEffect, provide, renderSlot } from 'vue';
import useParentComponentEffect from '../../../hooks/useParentComponentEffect';
import { warn, pathPointsToMapPoints, bindEvents } from '../../../utils';

var script = /*#__PURE__*/ defineComponent(Object.assign({
    name: 'BMapMask'
}, { __name: 'index', props: {
        path: { type: Array, required: true },
        showRegion: { type: null, required: false, default: 'inside' },
        isBuildingMask: { type: Boolean, required: false, default: false },
        isMapMask: { type: Boolean, required: false, default: false },
        isPoiMask: { type: Boolean, required: false, default: false },
        visible: { type: Boolean, required: false, default: true },
        onClick: { type: null, required: false },
        onDblclick: { type: null, required: false },
        onMousedown: { type: null, required: false },
        onMouseup: { type: null, required: false },
        onMouseout: { type: null, required: false },
        onMouseover: { type: null, required: false },
        onRightclick: { type: null, required: false }
    }, emits: [
        'initd',
        'unload',
        'click',
        'dblclick',
        'mousedown',
        'mouseup',
        'mouseout',
        'mouseover',
        'rightclick'
    ], setup(__props, { emit: vueEmits }) {
        const props = __props;
        let mapMask;
        const { ready } = useParentComponentEffect((map) => {
            const clear = () => {
                mapMask && map.removeOverlay(mapMask);
            };
            const init = () => {
                clear();
                if (!props.path || !(props.path && props.path.length))
                    return process.env.NODE_ENV !== 'production' && warn('BMapMask', 'path is required');
                const { path, showRegion, isBuildingMask, isMapMask, isPoiMask, visible } = props;
                const pathPoints = pathPointsToMapPoints(path);
                mapMask = new BMapGL.MapMask(pathPoints, {
                    showRegion,
                    isBuildingMask,
                    isMapMask,
                    isPoiMask
                });
                visible && map.addOverlay(mapMask);
                bindEvents(props, vueEmits, mapMask);
                ready(map, mapMask);
            };
            watchPostEffect(init);
            return clear;
        });
        provide('getOverlayInstance', () => mapMask);
        return (_ctx, _cache) => {
            return renderSlot(_ctx.$slots, "default");
        };
    } }));

script.__file = "packages/components/overlay/map-mask/index.vue";

export { script as default };
