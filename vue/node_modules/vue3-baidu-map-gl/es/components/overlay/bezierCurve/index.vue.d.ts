import { Callback, type Point, type StrokeStyle } from '../../../utils';
export interface BezierCurveProps {
    /**
     * 折线的节点坐标数组
     */
    path: Point[];
    /**
     * 曲线控制点
     */
    controlPoints: Point[][];
    /**
     * @default #000000
     * 折线颜色
     */
    strokeColor?: string;
    /**
     * 折线的宽度，以像素为单位
     */
    strokeWeight?: number;
    /**
     * 折线的透明度，取值范围0 - 1
     */
    strokeOpacity?: number;
    /**
     * 折线的样式
     */
    strokeStyle?: StrokeStyle;
    /**
     * @default true
     * 是否在调用map.clearOverlays清除此覆盖物，默认为true
     */
    enableMassClear?: boolean;
    /**
     * 是否可见
     */
    visible?: boolean;
    onClick?: Callback;
    onDblclick?: Callback;
    onMousedown?: Callback;
    onMouseup?: Callback;
    onMouseout?: Callback;
    onMouseover?: Callback;
    onRemove?: Callback;
    onLineupdate?: Callback;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<BezierCurveProps>, {
    strokeColor: string;
    strokeWeight: number;
    strokeOpacity: number;
    strokeStyle: string;
    enableMassClear: boolean;
    visible: boolean;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<BezierCurveProps>, {
    strokeColor: string;
    strokeWeight: number;
    strokeOpacity: number;
    strokeStyle: string;
    enableMassClear: boolean;
    visible: boolean;
}>>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    onLineupdate?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    strokeColor: string;
    strokeWeight: number;
    strokeOpacity: number;
    strokeStyle: StrokeStyle;
    enableMassClear: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
declare type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
