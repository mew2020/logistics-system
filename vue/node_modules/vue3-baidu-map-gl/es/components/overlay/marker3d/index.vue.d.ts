import { Callback, type Point } from '../../../utils';
export declare type Marker3dCustomIcon = {
    anchor?: {
        x: number;
        y: number;
    };
    imageOffset?: {
        x: number;
        y: number;
    };
    imageSize: {
        width: number;
        height: number;
    };
    imageUrl: string;
    printImageUrl?: string;
};
export declare type Marker3dShape = 'BMAP_SHAPE_CIRCLE' | 'BMAP_SHAPE_RECT';
export interface Marker3dProps {
    /**
     * 位置
     */
    position: Point;
    /**
     * 点高度
     */
    height: number;
    /**
     * 点大小
     */
    size?: number;
    /**
     * 点形状
     */
    shape?: Marker3dShape;
    /**
     * 点填充颜色，同CSS颜色
     */
    fillColor?: string;
    /**
     * 点填充的透明度，范围0-1
     */
    fillOpacity?: number;
    /**
     * 标注所用的图标对象
     */
    icon?: Marker3dCustomIcon;
    /**
     * @default true
     * 是否在调用map.clearOverlays清除此覆盖物，默认为true
     */
    enableMassClear?: boolean;
    /**
     * 是否可见
     */
    visible?: boolean;
    onClick?: Callback;
    onDblclick?: Callback;
    onMousedown?: Callback;
    onMouseup?: Callback;
    onMouseout?: Callback;
    onMouseover?: Callback;
    onRemove?: Callback;
    onRightClick?: Callback;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Marker3dProps>, {
    enableMassClear: boolean;
    size: number;
    shape: string;
    fillColor: string;
    fillOpacity: number;
    visible: boolean;
}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup" | "remove")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup" | "remove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Marker3dProps>, {
    enableMassClear: boolean;
    size: number;
    shape: string;
    fillColor: string;
    fillOpacity: number;
    visible: boolean;
}>>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRightclick?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
}, {
    size: number;
    visible: boolean;
    fillColor: string;
    fillOpacity: number;
    enableMassClear: boolean;
    shape: Marker3dShape;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
declare type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
