import { defineComponent, watch, provide, renderSlot } from 'vue';
import useParentComponentEffect from '../../../hooks/useParentComponentEffect';
import { callWhenDifferentValue, warn, isDef, bindEvents, isString } from '../../../utils/index';
import { useDefaultMarkerIcons } from '../../../hooks/useDefaultMarkerIcons';

var script = /*#__PURE__*/ defineComponent(Object.assign({ name: 'BMarker' }, { __name: 'index', props: {
        position: { type: null, required: true },
        offset: { type: Object, required: false, default: () => ({
                x: 0,
                y: 0
            }) },
        icon: { type: null, required: false },
        zIndex: { type: Number, required: false },
        enableMassClear: { type: Boolean, required: false, default: true },
        enableDragging: { type: Boolean, required: false, default: false },
        enableClicking: { type: Boolean, required: false, default: true },
        raiseOnDrag: { type: Boolean, required: false, default: false },
        draggingCursor: { type: String, required: false, default: 'pointer' },
        rotation: { type: Number, required: false, default: 0 },
        title: { type: String, required: false, default: '' },
        visible: { type: Boolean, required: false, default: true },
        onClick: { type: null, required: false },
        onDblclick: { type: null, required: false },
        onMousedown: { type: null, required: false },
        onMouseup: { type: null, required: false },
        onMouseout: { type: null, required: false },
        onMouseover: { type: null, required: false },
        onRemove: { type: null, required: false },
        onInfowindowclose: { type: null, required: false },
        onInfowindowopen: { type: null, required: false },
        onDragstart: { type: null, required: false },
        onDragging: { type: null, required: false },
        onDragend: { type: null, required: false },
        onRightClick: { type: null, required: false }
    }, emits: [
        'initd',
        'unload',
        'click',
        'dblclick',
        'mousedown',
        'mouseup',
        'mouseout',
        'mouseover',
        'remove',
        'infowindowclose',
        'infowindowopen',
        'dragstart',
        'dragging',
        'dragend',
        'rightclick'
    ], setup(__props, { emit: vueEmits }) {
        const props = __props;
        let marker;
        const { ready } = useParentComponentEffect((map) => {
            const cal = () => {
                marker && map.removeOverlay(marker);
            };
            const init = () => {
                if (!props.position) {
                    return process.env.NODE_ENV !== 'production' && warn('BMarker', 'position is required');
                }
                const { position, offset, enableMassClear, enableDragging, enableClicking, raiseOnDrag, draggingCursor, rotation, title, icon, zIndex, visible } = props;
                const options = {
                    offset: new BMapGL.Size(offset.x, offset.y),
                    enableMassClear,
                    enableDragging,
                    enableClicking,
                    raiseOnDrag,
                    draggingCursor,
                    title
                };
                if (icon) {
                    options.icon = getIconConfig();
                }
                marker = new BMapGL.Marker(new BMapGL.Point(position.lng, position.lat), options);
                setRotation(rotation);
                isDef(zIndex) && setZIndex(zIndex);
                // 在地图上添加点标记
                visible && map.addOverlay(marker);
                bindEvents(props, vueEmits, marker);
                ready(map, marker);
            };
            init();
            // 监听值变化
            watch(() => props.position, callWhenDifferentValue((n) => {
                marker ? setPosition(n) : init();
            }), { deep: true });
            watch(() => props.icon, callWhenDifferentValue(setIcon), { deep: true });
            watch(() => props.offset, callWhenDifferentValue(setOffset), { deep: true });
            watch(() => props.enableDragging, setDragging);
            watch(() => props.enableMassClear, setMassClear);
            watch(() => props.rotation, setRotation);
            watch(() => props.visible, (n) => {
                map[n ? 'addOverlay' : 'removeOverlay'](marker);
            });
            return cal;
        });
        provide('getOverlayInstance', () => marker);
        // 获取图标配置
        function getIconConfig() {
            const defaultIcons = useDefaultMarkerIcons();
            const { icon } = props;
            if (isString(icon) && defaultIcons[icon]) {
                return defaultIcons[icon];
            }
            else {
                // @ts-ignore
                const { anchor, imageOffset, imageSize, imageUrl, printImageUrl } = icon;
                const iconOptions = {
                    imageSize: new BMapGL.Size(imageSize.width, imageSize.height)
                };
                if (anchor) {
                    iconOptions.anchor = new BMapGL.Size(anchor.x, anchor.y);
                }
                if (imageOffset) {
                    iconOptions.imageOffset = new BMapGL.Size(imageOffset.x, imageOffset.y);
                }
                if (printImageUrl) {
                    iconOptions.printImageUrl = printImageUrl;
                }
                return new BMapGL.Icon(imageUrl, new BMapGL.Size(imageSize.width, imageSize.height), iconOptions);
            }
        }
        function setZIndex(zIndex) {
            marker.setZIndex(zIndex);
        }
        function setPosition(position) {
            position && position.lat && position.lng && marker.setPosition(new BMapGL.Point(position.lng, position.lat));
        }
        function setIcon() {
            marker.setIcon(getIconConfig());
        }
        function setDragging(enableDragging) {
            enableDragging ? marker.enableDragging() : marker.disableDragging();
        }
        function setMassClear(enableMassClear) {
            enableMassClear ? marker.enableMassClear() : marker.disableMassClear();
        }
        function setOffset(offset) {
            offset && marker.setOffset(new BMapGL.Size(offset.x, offset.y));
        }
        function setRotation(rotation) {
            rotation !== undefined && marker.setRotation(rotation);
        }
        return (_ctx, _cache) => {
            return renderSlot(_ctx.$slots, "default");
        };
    } }));

script.__file = "packages/components/overlay/marker/index.vue";

export { script as default };
