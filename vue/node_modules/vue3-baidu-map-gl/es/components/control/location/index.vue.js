import { defineComponent, watch } from 'vue';
import useParentComponentEffect from '../../../hooks/useParentComponentEffect';
import { bindEvents } from '../../../utils';

var script = /*#__PURE__*/ defineComponent(Object.assign({
    name: 'BLocation'
}, { __name: 'index', props: {
        anchor: { type: null, required: false, default: 'BMAP_ANCHOR_BOTTOM_RIGHT' },
        offset: { type: Object, required: false, default: () => ({ x: 18, y: 18 }) },
        visible: { type: Boolean, required: false, default: true },
        onLocationError: { type: null, required: false },
        onLocationSuccess: { type: null, required: false }
    }, emits: ['initd', 'unload', 'locationSuccess', 'locationError'], setup(__props, { emit: vueEmits }) {
        const props = __props;
        let locationControl;
        const { ready } = useParentComponentEffect((map) => {
            const { visible, offset, anchor } = props;
            locationControl = new BMapGL.LocationControl({
                offset: new BMapGL.Size(offset.x, offset.y),
                anchor: window[anchor]
            });
            visible && map.addControl(locationControl);
            ready(map, locationControl);
            bindEvents(props, vueEmits, locationControl);
            watch(() => props.visible, (n) => {
                map[n ? 'addControl' : 'removeControl'](locationControl);
            });
            return () => map.removeControl(locationControl);
        });
        return (_ctx, _cache) => {
            return null;
        };
    } }));

script.__file = "packages/components/control/location/index.vue";

export { script as default };
