declare const _default: (import("vue").DefineComponent<{
    location: {
        type: import("vue").PropType<string | BMapGL.Map | import("./utils").Point>;
    };
    types: {
        type: import("vue").PropType<string[]>;
    };
    onSearchComplete: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onHighlight: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onConfirm: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "searchComplete" | "highlight" | "confirm")[], "initd" | "unload" | "searchComplete" | "highlight" | "confirm", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    location: {
        type: import("vue").PropType<string | BMapGL.Map | import("./utils").Point>;
    };
    types: {
        type: import("vue").PropType<string[]>;
    };
    onSearchComplete: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onHighlight: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onConfirm: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}>> & {
    onSearchComplete?: ((...args: any[]) => any) | undefined;
    onHighlight?: ((...args: any[]) => any) | undefined;
    onConfirm?: ((...args: any[]) => any) | undefined;
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
}, {}, {}> | import("vue").DefineComponent<{
    width: {
        type: import("vue").PropType<number>;
        default: number;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    menuItems: {
        type: import("vue").PropType<(import("./components/contextMenu/index.vue").ContextMenuItem | "-")[]>;
        default: () => never[];
    };
    onOpen: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onClose: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "open" | "close")[], "initd" | "unload" | "open" | "close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    width: {
        type: import("vue").PropType<number>;
        default: number;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    menuItems: {
        type: import("vue").PropType<(import("./components/contextMenu/index.vue").ContextMenuItem | "-")[]>;
        default: () => never[];
    };
    onOpen: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onClose: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
}, {
    width: number;
    visible: boolean;
    menuItems: (import("./components/contextMenu/index.vue").ContextMenuItem | "-")[];
}, {}> | import("vue").DefineComponent<{
    anchor: {
        type: import("vue").PropType<import("./utils").ControlAnchor>;
        default: string;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<{
            x: number;
            y: number;
        }>;
        default: () => {
            x: number;
            y: number;
        };
    };
    expand: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload")[], "initd" | "unload", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    anchor: {
        type: import("vue").PropType<import("./utils").ControlAnchor>;
        default: string;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<{
            x: number;
            y: number;
        }>;
        default: () => {
            x: number;
            y: number;
        };
    };
    expand: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
}, {
    anchor: import("./utils").ControlAnchor;
    visible: boolean;
    offset: {
        x: number;
        y: number;
    };
    expand: boolean;
}, {}> | import("vue").DefineComponent<{
    anchor: {
        type: import("vue").PropType<import("./utils").ControlAnchor>;
        default: string;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<{
            x: number;
            y: number;
        }>;
        default: () => {
            x: number;
            y: number;
        };
    };
    onLocationError: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onLocationSuccess: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "locationSuccess" | "locationError")[], "initd" | "unload" | "locationSuccess" | "locationError", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    anchor: {
        type: import("vue").PropType<import("./utils").ControlAnchor>;
        default: string;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<{
            x: number;
            y: number;
        }>;
        default: () => {
            x: number;
            y: number;
        };
    };
    onLocationError: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onLocationSuccess: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onLocationError?: ((...args: any[]) => any) | undefined;
    onLocationSuccess?: ((...args: any[]) => any) | undefined;
}, {
    anchor: import("./utils").ControlAnchor;
    visible: boolean;
    offset: {
        x: number;
        y: number;
    };
}, {}> | import("vue").DefineComponent<{
    anchor: {
        type: import("vue").PropType<import("./utils").ControlAnchor>;
        default: string;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<{
            x: number;
            y: number;
        }>;
        default: () => {
            x: number;
            y: number;
        };
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload")[], "initd" | "unload", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    anchor: {
        type: import("vue").PropType<import("./utils").ControlAnchor>;
        default: string;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<{
            x: number;
            y: number;
        }>;
        default: () => {
            x: number;
            y: number;
        };
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
}, {
    anchor: import("./utils").ControlAnchor;
    visible: boolean;
    offset: {
        x: number;
        y: number;
    };
}, {}> | import("vue").DefineComponent<{
    anchor: {
        type: import("vue").PropType<import("./utils").ControlAnchor>;
        default: string;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<{
            x: number;
            y: number;
        }>;
        default: () => {
            x: number;
            y: number;
        };
    };
    unit: {
        type: import("vue").PropType<import("./utils").LengthUnit>;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload")[], "initd" | "unload", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    anchor: {
        type: import("vue").PropType<import("./utils").ControlAnchor>;
        default: string;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<{
            x: number;
            y: number;
        }>;
        default: () => {
            x: number;
            y: number;
        };
    };
    unit: {
        type: import("vue").PropType<import("./utils").LengthUnit>;
        default: string;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
}, {
    anchor: import("./utils").ControlAnchor;
    visible: boolean;
    offset: {
        x: number;
        y: number;
    };
    unit: import("./utils").LengthUnit;
}, {}> | import("vue").DefineComponent<{
    name: {
        type: import("vue").PropType<string>;
        required: true;
    };
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    kind: {
        type: import("vue").PropType<import("./utils").DistrictType>;
        default: number;
    };
    fillColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    fillOpacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    viewport: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onRightclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onRightdblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click")[], "initd" | "unload" | "mouseover" | "mouseout" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    name: {
        type: import("vue").PropType<string>;
        required: true;
    };
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    kind: {
        type: import("vue").PropType<import("./utils").DistrictType>;
        default: number;
    };
    fillColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    fillOpacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    viewport: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onRightclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onRightdblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    kind: import("./utils").DistrictType;
    fillColor: string;
    fillOpacity: number;
    strokeColor: string;
    viewport: boolean;
}, {}> | import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload")[], "initd" | "unload", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
}, {}, {}> | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            height?: string | number | undefined;
            width?: string | number | undefined;
            enableDragging?: boolean | undefined;
            center?: string | import("./utils").Point | undefined;
            mapType?: import("./utils").MapType | undefined;
            zoom?: number | undefined;
            heading?: number | undefined;
            tilt?: number | undefined;
            minZoom?: number | undefined;
            maxZoom?: number | undefined;
            noAnimation?: boolean | undefined;
            showControls?: boolean | undefined;
            restrictCenter?: boolean | undefined;
            enableTraffic?: boolean | undefined;
            enableInertialDragging?: boolean | undefined;
            enableScrollWheelZoom?: boolean | undefined;
            enableContinuousZoom?: boolean | undefined;
            enableResizeOnCenter?: boolean | undefined;
            enableDoubleClickZoom?: boolean | undefined;
            enableKeyboard?: boolean | undefined;
            enablePinchToZoom?: boolean | undefined;
            enableAutoResize?: boolean | undefined;
            loadingBgColor?: string | undefined;
            loadingTextColor?: string | undefined;
            backgroundColor?: number[] | undefined;
            key?: string | number | symbol | undefined;
            style?: unknown;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            onDragend?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDragstart?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onLoad?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onClick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMousemove?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onTouchend?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onTouchmove?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onTouchstart?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRightclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRightdblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly ak?: string | undefined;
            readonly apiUrl?: string | undefined;
            readonly mapStyleId?: string | undefined;
            readonly mapStyleJson?: {
                featureType: string;
                elementType: string;
                stylers: {
                    visibility: string;
                    color: string;
                };
            }[] | undefined;
            readonly plugins?: import("./utils").UserPlugins | undefined;
            readonly pluginsSourceLink?: Partial<import("./utils").PluginsSourceLink> | undefined;
            readonly displayOptions?: import("./components/map/index.vue").MapDisplayOptions | undefined;
            readonly enableIconClick?: boolean | undefined;
            onMaptypechange?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMovestart?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMoving?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMoveend?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onZoomstart?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onZoomend?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onAddoverlay?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onAddcontrol?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRemovecontrol?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRemoveoverlay?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onClearoverlays?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDragging?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onAddtilelayer?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRemovetilelayer?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onResize?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onHotspotclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onHotspotover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onHotspotout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onTilesloaded?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onLongpress?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onPluginReady?: ((...args: any[]) => any) | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "pluginReady" | "dblclick" | "rightclick" | "rightdblclick" | "maptypechange" | "mousemove" | "movestart" | "moving" | "moveend" | "zoomstart" | "zoomend" | "addoverlay" | "addcontrol" | "removecontrol" | "removeoverlay" | "clearoverlays" | "dragstart" | "dragging" | "dragend" | "addtilelayer" | "removetilelayer" | "load" | "resize" | "hotspotclick" | "hotspotover" | "hotspotout" | "tilesloaded" | "touchstart" | "touchmove" | "touchend" | "longpress", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            onDragend: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDragstart: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onLoad: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMousemove: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onTouchend: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onTouchmove: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onTouchstart: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            height: {
                type: import("vue").PropType<string | number>;
                default: string;
            };
            width: {
                type: import("vue").PropType<string | number>;
                default: string;
            };
            onRightclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onRightdblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            enableDragging: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            ak: {
                type: import("vue").PropType<string>;
            };
            apiUrl: {
                type: import("vue").PropType<string>;
            };
            center: {
                type: import("vue").PropType<string | import("./utils").Point>;
                default: () => import("./utils").Point;
            };
            mapType: {
                type: import("vue").PropType<import("./utils").MapType>;
                default: string;
            };
            zoom: {
                type: import("vue").PropType<number>;
                default: number;
            };
            heading: {
                type: import("vue").PropType<number>;
                default: number;
            };
            tilt: {
                type: import("vue").PropType<number>;
                default: number;
            };
            minZoom: {
                type: import("vue").PropType<number>;
                default: number;
            };
            maxZoom: {
                type: import("vue").PropType<number>;
                default: number;
            };
            noAnimation: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            mapStyleId: {
                type: import("vue").PropType<string>;
            };
            mapStyleJson: {
                type: import("vue").PropType<{
                    featureType: string;
                    elementType: string;
                    stylers: {
                        visibility: string;
                        color: string;
                    };
                }[]>;
            };
            showControls: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            plugins: {
                type: import("vue").PropType<import("./utils").UserPlugins>;
            };
            pluginsSourceLink: {
                type: import("vue").PropType<Partial<import("./utils").PluginsSourceLink>>;
            };
            displayOptions: {
                type: import("vue").PropType<import("./components/map/index.vue").MapDisplayOptions>;
            };
            restrictCenter: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableTraffic: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableInertialDragging: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableScrollWheelZoom: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableContinuousZoom: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableResizeOnCenter: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableDoubleClickZoom: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableKeyboard: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enablePinchToZoom: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableAutoResize: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableIconClick: {
                type: import("vue").PropType<boolean>;
            };
            loadingBgColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            loadingTextColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            backgroundColor: {
                type: import("vue").PropType<number[]>;
                default: () => number[];
            };
            onMaptypechange: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMovestart: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMoving: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMoveend: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onZoomstart: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onZoomend: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onAddoverlay: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onAddcontrol: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onRemovecontrol: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onRemoveoverlay: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onClearoverlays: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDragging: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onAddtilelayer: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onRemovetilelayer: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onResize: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onHotspotclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onHotspotover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onHotspotout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onTilesloaded: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onLongpress: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onDragend?: ((...args: any[]) => any) | undefined;
            onDragstart?: ((...args: any[]) => any) | undefined;
            onLoad?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousemove?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onTouchend?: ((...args: any[]) => any) | undefined;
            onTouchmove?: ((...args: any[]) => any) | undefined;
            onTouchstart?: ((...args: any[]) => any) | undefined;
            onRightclick?: ((...args: any[]) => any) | undefined;
            onRightdblclick?: ((...args: any[]) => any) | undefined;
            onMaptypechange?: ((...args: any[]) => any) | undefined;
            onMovestart?: ((...args: any[]) => any) | undefined;
            onMoving?: ((...args: any[]) => any) | undefined;
            onMoveend?: ((...args: any[]) => any) | undefined;
            onZoomstart?: ((...args: any[]) => any) | undefined;
            onZoomend?: ((...args: any[]) => any) | undefined;
            onAddoverlay?: ((...args: any[]) => any) | undefined;
            onAddcontrol?: ((...args: any[]) => any) | undefined;
            onRemovecontrol?: ((...args: any[]) => any) | undefined;
            onRemoveoverlay?: ((...args: any[]) => any) | undefined;
            onClearoverlays?: ((...args: any[]) => any) | undefined;
            onDragging?: ((...args: any[]) => any) | undefined;
            onAddtilelayer?: ((...args: any[]) => any) | undefined;
            onRemovetilelayer?: ((...args: any[]) => any) | undefined;
            onResize?: ((...args: any[]) => any) | undefined;
            onHotspotclick?: ((...args: any[]) => any) | undefined;
            onHotspotover?: ((...args: any[]) => any) | undefined;
            onHotspotout?: ((...args: any[]) => any) | undefined;
            onTilesloaded?: ((...args: any[]) => any) | undefined;
            onLongpress?: ((...args: any[]) => any) | undefined;
            onPluginReady?: ((...args: any[]) => any) | undefined;
        }, {
            getMapInstance: () => BMapGL.Map | null;
            getBaseMapOptions: () => Omit<import("./components/map/index.vue").MapProps, "height" | "width" | "enableDragging" | "center" | "mapType" | "zoom" | "heading" | "tilt" | "minZoom" | "maxZoom" | "noAnimation" | "showControls" | "restrictCenter" | "enableTraffic" | "enableInertialDragging" | "enableScrollWheelZoom" | "enableContinuousZoom" | "enableResizeOnCenter" | "enableDoubleClickZoom" | "enableKeyboard" | "enablePinchToZoom" | "enableAutoResize" | "loadingBgColor" | "loadingTextColor" | "backgroundColor"> & {
                width: string | number;
                height: string | number;
                center: string | import("./utils").Point;
                mapType: import("./utils").MapType;
                zoom: number;
                maxZoom: number;
                minZoom: number;
                heading: number;
                tilt: number;
                restrictCenter: boolean;
                noAnimation: boolean;
                showControls: boolean;
                backgroundColor: number[];
                loadingBgColor: string;
                loadingTextColor: string;
                enableTraffic: boolean;
                enableDragging: boolean;
                enableInertialDragging: boolean;
                enableScrollWheelZoom: boolean;
                enableContinuousZoom: boolean;
                enableResizeOnCenter: boolean;
                enableDoubleClickZoom: boolean;
                enableKeyboard: boolean;
                enablePinchToZoom: boolean;
                enableAutoResize: boolean;
            } & {
                readonly enableDragging: boolean;
                readonly noAnimation: boolean;
                readonly showControls: boolean;
                readonly restrictCenter: boolean;
                readonly enableTraffic: boolean;
                readonly enableInertialDragging: boolean;
                readonly enableScrollWheelZoom: boolean;
                readonly enableContinuousZoom: boolean;
                readonly enableResizeOnCenter: boolean;
                readonly enableDoubleClickZoom: boolean;
                readonly enableKeyboard: boolean;
                readonly enablePinchToZoom: boolean;
                readonly enableAutoResize: boolean;
                readonly enableIconClick: boolean;
            };
            resetCenter: () => void;
            setDragging: (enableDragging: boolean) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "pluginReady" | "dblclick" | "rightclick" | "rightdblclick" | "maptypechange" | "mousemove" | "movestart" | "moving" | "moveend" | "zoomstart" | "zoomend" | "addoverlay" | "addcontrol" | "removecontrol" | "removeoverlay" | "clearoverlays" | "dragstart" | "dragging" | "dragend" | "addtilelayer" | "removetilelayer" | "load" | "resize" | "hotspotclick" | "hotspotover" | "hotspotout" | "tilesloaded" | "touchstart" | "touchmove" | "touchend" | "longpress")[], string, {
            height: string | number;
            width: string | number;
            enableDragging: boolean;
            center: string | import("./utils").Point;
            mapType: import("./utils").MapType;
            zoom: number;
            heading: number;
            tilt: number;
            minZoom: number;
            maxZoom: number;
            noAnimation: boolean;
            showControls: boolean;
            restrictCenter: boolean;
            enableTraffic: boolean;
            enableInertialDragging: boolean;
            enableScrollWheelZoom: boolean;
            enableContinuousZoom: boolean;
            enableResizeOnCenter: boolean;
            enableDoubleClickZoom: boolean;
            enableKeyboard: boolean;
            enablePinchToZoom: boolean;
            enableAutoResize: boolean;
            loadingBgColor: string;
            loadingTextColor: string;
            backgroundColor: number[];
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        onDragend: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDragstart: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onLoad: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMousemove: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onTouchend: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onTouchmove: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onTouchstart: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        height: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        width: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        onRightclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onRightdblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        enableDragging: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        ak: {
            type: import("vue").PropType<string>;
        };
        apiUrl: {
            type: import("vue").PropType<string>;
        };
        center: {
            type: import("vue").PropType<string | import("./utils").Point>;
            default: () => import("./utils").Point;
        };
        mapType: {
            type: import("vue").PropType<import("./utils").MapType>;
            default: string;
        };
        zoom: {
            type: import("vue").PropType<number>;
            default: number;
        };
        heading: {
            type: import("vue").PropType<number>;
            default: number;
        };
        tilt: {
            type: import("vue").PropType<number>;
            default: number;
        };
        minZoom: {
            type: import("vue").PropType<number>;
            default: number;
        };
        maxZoom: {
            type: import("vue").PropType<number>;
            default: number;
        };
        noAnimation: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        mapStyleId: {
            type: import("vue").PropType<string>;
        };
        mapStyleJson: {
            type: import("vue").PropType<{
                featureType: string;
                elementType: string;
                stylers: {
                    visibility: string;
                    color: string;
                };
            }[]>;
        };
        showControls: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        plugins: {
            type: import("vue").PropType<import("./utils").UserPlugins>;
        };
        pluginsSourceLink: {
            type: import("vue").PropType<Partial<import("./utils").PluginsSourceLink>>;
        };
        displayOptions: {
            type: import("vue").PropType<import("./components/map/index.vue").MapDisplayOptions>;
        };
        restrictCenter: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableTraffic: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableInertialDragging: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableScrollWheelZoom: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableContinuousZoom: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableResizeOnCenter: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableDoubleClickZoom: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableKeyboard: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enablePinchToZoom: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableAutoResize: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableIconClick: {
            type: import("vue").PropType<boolean>;
        };
        loadingBgColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        loadingTextColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        backgroundColor: {
            type: import("vue").PropType<number[]>;
            default: () => number[];
        };
        onMaptypechange: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMovestart: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMoving: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMoveend: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onZoomstart: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onZoomend: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onAddoverlay: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onAddcontrol: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onRemovecontrol: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onRemoveoverlay: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onClearoverlays: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDragging: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onAddtilelayer: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onRemovetilelayer: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onResize: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onHotspotclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onHotspotover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onHotspotout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onTilesloaded: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onLongpress: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onDragend?: ((...args: any[]) => any) | undefined;
        onDragstart?: ((...args: any[]) => any) | undefined;
        onLoad?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousemove?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onTouchend?: ((...args: any[]) => any) | undefined;
        onTouchmove?: ((...args: any[]) => any) | undefined;
        onTouchstart?: ((...args: any[]) => any) | undefined;
        onRightclick?: ((...args: any[]) => any) | undefined;
        onRightdblclick?: ((...args: any[]) => any) | undefined;
        onMaptypechange?: ((...args: any[]) => any) | undefined;
        onMovestart?: ((...args: any[]) => any) | undefined;
        onMoving?: ((...args: any[]) => any) | undefined;
        onMoveend?: ((...args: any[]) => any) | undefined;
        onZoomstart?: ((...args: any[]) => any) | undefined;
        onZoomend?: ((...args: any[]) => any) | undefined;
        onAddoverlay?: ((...args: any[]) => any) | undefined;
        onAddcontrol?: ((...args: any[]) => any) | undefined;
        onRemovecontrol?: ((...args: any[]) => any) | undefined;
        onRemoveoverlay?: ((...args: any[]) => any) | undefined;
        onClearoverlays?: ((...args: any[]) => any) | undefined;
        onDragging?: ((...args: any[]) => any) | undefined;
        onAddtilelayer?: ((...args: any[]) => any) | undefined;
        onRemovetilelayer?: ((...args: any[]) => any) | undefined;
        onResize?: ((...args: any[]) => any) | undefined;
        onHotspotclick?: ((...args: any[]) => any) | undefined;
        onHotspotover?: ((...args: any[]) => any) | undefined;
        onHotspotout?: ((...args: any[]) => any) | undefined;
        onTilesloaded?: ((...args: any[]) => any) | undefined;
        onLongpress?: ((...args: any[]) => any) | undefined;
        onPluginReady?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        getMapInstance: () => BMapGL.Map | null;
        getBaseMapOptions: () => Omit<import("./components/map/index.vue").MapProps, "height" | "width" | "enableDragging" | "center" | "mapType" | "zoom" | "heading" | "tilt" | "minZoom" | "maxZoom" | "noAnimation" | "showControls" | "restrictCenter" | "enableTraffic" | "enableInertialDragging" | "enableScrollWheelZoom" | "enableContinuousZoom" | "enableResizeOnCenter" | "enableDoubleClickZoom" | "enableKeyboard" | "enablePinchToZoom" | "enableAutoResize" | "loadingBgColor" | "loadingTextColor" | "backgroundColor"> & {
            width: string | number;
            height: string | number;
            center: string | import("./utils").Point;
            mapType: import("./utils").MapType;
            zoom: number;
            maxZoom: number;
            minZoom: number;
            heading: number;
            tilt: number;
            restrictCenter: boolean;
            noAnimation: boolean;
            showControls: boolean;
            backgroundColor: number[];
            loadingBgColor: string;
            loadingTextColor: string;
            enableTraffic: boolean;
            enableDragging: boolean;
            enableInertialDragging: boolean;
            enableScrollWheelZoom: boolean;
            enableContinuousZoom: boolean;
            enableResizeOnCenter: boolean;
            enableDoubleClickZoom: boolean;
            enableKeyboard: boolean;
            enablePinchToZoom: boolean;
            enableAutoResize: boolean;
        } & {
            readonly enableDragging: boolean;
            readonly noAnimation: boolean;
            readonly showControls: boolean;
            readonly restrictCenter: boolean;
            readonly enableTraffic: boolean;
            readonly enableInertialDragging: boolean;
            readonly enableScrollWheelZoom: boolean;
            readonly enableContinuousZoom: boolean;
            readonly enableResizeOnCenter: boolean;
            readonly enableDoubleClickZoom: boolean;
            readonly enableKeyboard: boolean;
            readonly enablePinchToZoom: boolean;
            readonly enableAutoResize: boolean;
            readonly enableIconClick: boolean;
        };
        resetCenter: () => void;
        setDragging: (enableDragging: boolean) => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    onDragend: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDragstart: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onLoad: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onTouchend: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onTouchmove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onTouchstart: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    height: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    width: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    onRightclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onRightdblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    enableDragging: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    ak: {
        type: import("vue").PropType<string>;
    };
    apiUrl: {
        type: import("vue").PropType<string>;
    };
    center: {
        type: import("vue").PropType<string | import("./utils").Point>;
        default: () => import("./utils").Point;
    };
    mapType: {
        type: import("vue").PropType<import("./utils").MapType>;
        default: string;
    };
    zoom: {
        type: import("vue").PropType<number>;
        default: number;
    };
    heading: {
        type: import("vue").PropType<number>;
        default: number;
    };
    tilt: {
        type: import("vue").PropType<number>;
        default: number;
    };
    minZoom: {
        type: import("vue").PropType<number>;
        default: number;
    };
    maxZoom: {
        type: import("vue").PropType<number>;
        default: number;
    };
    noAnimation: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    mapStyleId: {
        type: import("vue").PropType<string>;
    };
    mapStyleJson: {
        type: import("vue").PropType<{
            featureType: string;
            elementType: string;
            stylers: {
                visibility: string;
                color: string;
            };
        }[]>;
    };
    showControls: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    plugins: {
        type: import("vue").PropType<import("./utils").UserPlugins>;
    };
    pluginsSourceLink: {
        type: import("vue").PropType<Partial<import("./utils").PluginsSourceLink>>;
    };
    displayOptions: {
        type: import("vue").PropType<import("./components/map/index.vue").MapDisplayOptions>;
    };
    restrictCenter: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableTraffic: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableInertialDragging: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableScrollWheelZoom: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableContinuousZoom: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableResizeOnCenter: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableDoubleClickZoom: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableKeyboard: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enablePinchToZoom: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableAutoResize: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableIconClick: {
        type: import("vue").PropType<boolean>;
    };
    loadingBgColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    loadingTextColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    backgroundColor: {
        type: import("vue").PropType<number[]>;
        default: () => number[];
    };
    onMaptypechange: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMovestart: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMoving: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMoveend: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onZoomstart: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onZoomend: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onAddoverlay: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onAddcontrol: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onRemovecontrol: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onRemoveoverlay: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onClearoverlays: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDragging: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onAddtilelayer: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onRemovetilelayer: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onResize: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onHotspotclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onHotspotover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onHotspotout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onTilesloaded: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onLongpress: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onDragend?: ((...args: any[]) => any) | undefined;
    onDragstart?: ((...args: any[]) => any) | undefined;
    onLoad?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousemove?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onTouchend?: ((...args: any[]) => any) | undefined;
    onTouchmove?: ((...args: any[]) => any) | undefined;
    onTouchstart?: ((...args: any[]) => any) | undefined;
    onRightclick?: ((...args: any[]) => any) | undefined;
    onRightdblclick?: ((...args: any[]) => any) | undefined;
    onMaptypechange?: ((...args: any[]) => any) | undefined;
    onMovestart?: ((...args: any[]) => any) | undefined;
    onMoving?: ((...args: any[]) => any) | undefined;
    onMoveend?: ((...args: any[]) => any) | undefined;
    onZoomstart?: ((...args: any[]) => any) | undefined;
    onZoomend?: ((...args: any[]) => any) | undefined;
    onAddoverlay?: ((...args: any[]) => any) | undefined;
    onAddcontrol?: ((...args: any[]) => any) | undefined;
    onRemovecontrol?: ((...args: any[]) => any) | undefined;
    onRemoveoverlay?: ((...args: any[]) => any) | undefined;
    onClearoverlays?: ((...args: any[]) => any) | undefined;
    onDragging?: ((...args: any[]) => any) | undefined;
    onAddtilelayer?: ((...args: any[]) => any) | undefined;
    onRemovetilelayer?: ((...args: any[]) => any) | undefined;
    onResize?: ((...args: any[]) => any) | undefined;
    onHotspotclick?: ((...args: any[]) => any) | undefined;
    onHotspotover?: ((...args: any[]) => any) | undefined;
    onHotspotout?: ((...args: any[]) => any) | undefined;
    onTilesloaded?: ((...args: any[]) => any) | undefined;
    onLongpress?: ((...args: any[]) => any) | undefined;
    onPluginReady?: ((...args: any[]) => any) | undefined;
}, {
    getMapInstance: () => BMapGL.Map | null;
    getBaseMapOptions: () => Omit<import("./components/map/index.vue").MapProps, "height" | "width" | "enableDragging" | "center" | "mapType" | "zoom" | "heading" | "tilt" | "minZoom" | "maxZoom" | "noAnimation" | "showControls" | "restrictCenter" | "enableTraffic" | "enableInertialDragging" | "enableScrollWheelZoom" | "enableContinuousZoom" | "enableResizeOnCenter" | "enableDoubleClickZoom" | "enableKeyboard" | "enablePinchToZoom" | "enableAutoResize" | "loadingBgColor" | "loadingTextColor" | "backgroundColor"> & {
        width: string | number;
        height: string | number;
        center: string | import("./utils").Point;
        mapType: import("./utils").MapType;
        zoom: number;
        maxZoom: number;
        minZoom: number;
        heading: number;
        tilt: number;
        restrictCenter: boolean;
        noAnimation: boolean;
        showControls: boolean;
        backgroundColor: number[];
        loadingBgColor: string;
        loadingTextColor: string;
        enableTraffic: boolean;
        enableDragging: boolean;
        enableInertialDragging: boolean;
        enableScrollWheelZoom: boolean;
        enableContinuousZoom: boolean;
        enableResizeOnCenter: boolean;
        enableDoubleClickZoom: boolean;
        enableKeyboard: boolean;
        enablePinchToZoom: boolean;
        enableAutoResize: boolean;
    } & {
        readonly enableDragging: boolean;
        readonly noAnimation: boolean;
        readonly showControls: boolean;
        readonly restrictCenter: boolean;
        readonly enableTraffic: boolean;
        readonly enableInertialDragging: boolean;
        readonly enableScrollWheelZoom: boolean;
        readonly enableContinuousZoom: boolean;
        readonly enableResizeOnCenter: boolean;
        readonly enableDoubleClickZoom: boolean;
        readonly enableKeyboard: boolean;
        readonly enablePinchToZoom: boolean;
        readonly enableAutoResize: boolean;
        readonly enableIconClick: boolean;
    };
    resetCenter: () => void;
    setDragging: (enableDragging: boolean) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "pluginReady" | "dblclick" | "rightclick" | "rightdblclick" | "maptypechange" | "mousemove" | "movestart" | "moving" | "moveend" | "zoomstart" | "zoomend" | "addoverlay" | "addcontrol" | "removecontrol" | "removeoverlay" | "clearoverlays" | "dragstart" | "dragging" | "dragend" | "addtilelayer" | "removetilelayer" | "load" | "resize" | "hotspotclick" | "hotspotover" | "hotspotout" | "tilesloaded" | "touchstart" | "touchmove" | "touchend" | "longpress")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "pluginReady" | "dblclick" | "rightclick" | "rightdblclick" | "maptypechange" | "mousemove" | "movestart" | "moving" | "moveend" | "zoomstart" | "zoomend" | "addoverlay" | "addcontrol" | "removecontrol" | "removeoverlay" | "clearoverlays" | "dragstart" | "dragging" | "dragend" | "addtilelayer" | "removetilelayer" | "load" | "resize" | "hotspotclick" | "hotspotover" | "hotspotout" | "tilesloaded" | "touchstart" | "touchmove" | "touchend" | "longpress", {
    height: string | number;
    width: string | number;
    enableDragging: boolean;
    center: string | import("./utils").Point;
    mapType: import("./utils").MapType;
    zoom: number;
    heading: number;
    tilt: number;
    minZoom: number;
    maxZoom: number;
    noAnimation: boolean;
    showControls: boolean;
    restrictCenter: boolean;
    enableTraffic: boolean;
    enableInertialDragging: boolean;
    enableScrollWheelZoom: boolean;
    enableContinuousZoom: boolean;
    enableResizeOnCenter: boolean;
    enableDoubleClickZoom: boolean;
    enableKeyboard: boolean;
    enablePinchToZoom: boolean;
    enableAutoResize: boolean;
    loadingBgColor: string;
    loadingTextColor: string;
    backgroundColor: number[];
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        loading?(_: {}): any;
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            visible?: boolean | undefined;
            strokeColor?: string | undefined;
            strokeWeight?: number | undefined;
            strokeOpacity?: number | undefined;
            strokeStyle?: import("./utils").StrokeStyle | undefined;
            enableMassClear?: boolean | undefined;
            key?: string | number | symbol | undefined;
            style?: unknown;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            readonly path: import("./utils").Point[];
            onClick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMousedown?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseup?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly controlPoints: import("./utils").Point[][];
            onRemove?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onLineupdate?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            path: {
                type: import("vue").PropType<import("./utils").Point[]>;
                required: true;
            };
            onClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMousedown: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseup: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            strokeColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            controlPoints: {
                type: import("vue").PropType<import("./utils").Point[][]>;
                required: true;
            };
            strokeWeight: {
                type: import("vue").PropType<number>;
                default: number;
            };
            strokeOpacity: {
                type: import("vue").PropType<number>;
                default: number;
            };
            strokeStyle: {
                type: import("vue").PropType<import("./utils").StrokeStyle>;
                default: string;
            };
            enableMassClear: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onRemove: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onLineupdate: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            onLineupdate?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], string, {
            visible: boolean;
            strokeColor: string;
            strokeWeight: number;
            strokeOpacity: number;
            strokeStyle: import("./utils").StrokeStyle;
            enableMassClear: boolean;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        path: {
            type: import("vue").PropType<import("./utils").Point[]>;
            required: true;
        };
        onClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMousedown: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseup: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        strokeColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        controlPoints: {
            type: import("vue").PropType<import("./utils").Point[][]>;
            required: true;
        };
        strokeWeight: {
            type: import("vue").PropType<number>;
            default: number;
        };
        strokeOpacity: {
            type: import("vue").PropType<number>;
            default: number;
        };
        strokeStyle: {
            type: import("vue").PropType<import("./utils").StrokeStyle>;
            default: string;
        };
        enableMassClear: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onRemove: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onLineupdate: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousedown?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onMouseup?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
        onLineupdate?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    path: {
        type: import("vue").PropType<import("./utils").Point[]>;
        required: true;
    };
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousedown: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseup: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    strokeColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    controlPoints: {
        type: import("vue").PropType<import("./utils").Point[][]>;
        required: true;
    };
    strokeWeight: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeOpacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeStyle: {
        type: import("vue").PropType<import("./utils").StrokeStyle>;
        default: string;
    };
    enableMassClear: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onRemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onLineupdate: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    onLineupdate?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", {
    visible: boolean;
    strokeColor: string;
    strokeWeight: number;
    strokeOpacity: number;
    strokeStyle: import("./utils").StrokeStyle;
    enableMassClear: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            visible?: boolean | undefined;
            fillColor?: string | undefined;
            fillOpacity?: number | undefined;
            strokeColor?: string | undefined;
            strokeWeight?: number | undefined;
            strokeOpacity?: number | undefined;
            strokeStyle?: import("./utils").StrokeStyle | undefined;
            enableMassClear?: boolean | undefined;
            enableEditing?: boolean | undefined;
            enableClicking?: boolean | undefined;
            geodesic?: boolean | undefined;
            clip?: boolean | undefined;
            key?: string | number | symbol | undefined;
            style?: unknown;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            onClick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMousedown?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseup?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly center: import("./utils").Point;
            onRemove?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onLineupdate?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly radius: number;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            onClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMousedown: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseup: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            fillColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            fillOpacity: {
                type: import("vue").PropType<number>;
                default: number;
            };
            strokeColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            center: {
                type: import("vue").PropType<import("./utils").Point>;
                required: true;
            };
            strokeWeight: {
                type: import("vue").PropType<number>;
                default: number;
            };
            strokeOpacity: {
                type: import("vue").PropType<number>;
                default: number;
            };
            strokeStyle: {
                type: import("vue").PropType<import("./utils").StrokeStyle>;
                default: string;
            };
            enableMassClear: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onRemove: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onLineupdate: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            radius: {
                type: import("vue").PropType<number>;
                required: true;
            };
            enableEditing: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableClicking: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            geodesic: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            clip: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            onLineupdate?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], string, {
            visible: boolean;
            fillColor: string;
            fillOpacity: number;
            strokeColor: string;
            strokeWeight: number;
            strokeOpacity: number;
            strokeStyle: import("./utils").StrokeStyle;
            enableMassClear: boolean;
            enableEditing: boolean;
            enableClicking: boolean;
            geodesic: boolean;
            clip: boolean;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        onClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMousedown: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseup: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        fillColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        fillOpacity: {
            type: import("vue").PropType<number>;
            default: number;
        };
        strokeColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        center: {
            type: import("vue").PropType<import("./utils").Point>;
            required: true;
        };
        strokeWeight: {
            type: import("vue").PropType<number>;
            default: number;
        };
        strokeOpacity: {
            type: import("vue").PropType<number>;
            default: number;
        };
        strokeStyle: {
            type: import("vue").PropType<import("./utils").StrokeStyle>;
            default: string;
        };
        enableMassClear: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onRemove: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onLineupdate: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        radius: {
            type: import("vue").PropType<number>;
            required: true;
        };
        enableEditing: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableClicking: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        geodesic: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clip: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousedown?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onMouseup?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
        onLineupdate?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousedown: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseup: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    fillColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    fillOpacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    center: {
        type: import("vue").PropType<import("./utils").Point>;
        required: true;
    };
    strokeWeight: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeOpacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeStyle: {
        type: import("vue").PropType<import("./utils").StrokeStyle>;
        default: string;
    };
    enableMassClear: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onRemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onLineupdate: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    radius: {
        type: import("vue").PropType<number>;
        required: true;
    };
    enableEditing: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableClicking: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    geodesic: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    clip: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    onLineupdate?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", {
    visible: boolean;
    fillColor: string;
    fillOpacity: number;
    strokeColor: string;
    strokeWeight: number;
    strokeOpacity: number;
    strokeStyle: import("./utils").StrokeStyle;
    enableMassClear: boolean;
    enableEditing: boolean;
    enableClicking: boolean;
    geodesic: boolean;
    clip: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            visible?: boolean | undefined;
            autoCenter?: boolean | undefined;
            opacity?: number | undefined;
            key?: string | number | symbol | undefined;
            style?: unknown;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            readonly type: "canvas" | "video" | "image";
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            onClick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMousemove?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly url: import("./components/overlay/ground-overlay/index.vue").GroundOverlayUrl;
            readonly startPoint: import("./utils").Point;
            readonly endPoint: import("./utils").Point;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousemove", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            type: {
                type: import("vue").PropType<"canvas" | "video" | "image">;
                required: true;
            };
            onClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMousemove: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            url: {
                type: import("vue").PropType<import("./components/overlay/ground-overlay/index.vue").GroundOverlayUrl>;
                required: true;
            };
            startPoint: {
                type: import("vue").PropType<import("./utils").Point>;
                required: true;
            };
            endPoint: {
                type: import("vue").PropType<import("./utils").Point>;
                required: true;
            };
            autoCenter: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            opacity: {
                type: import("vue").PropType<number>;
                default: number;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousemove?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousemove")[], string, {
            visible: boolean;
            autoCenter: boolean;
            opacity: number;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: import("vue").PropType<"canvas" | "video" | "image">;
            required: true;
        };
        onClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMousemove: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        url: {
            type: import("vue").PropType<import("./components/overlay/ground-overlay/index.vue").GroundOverlayUrl>;
            required: true;
        };
        startPoint: {
            type: import("vue").PropType<import("./utils").Point>;
            required: true;
        };
        endPoint: {
            type: import("vue").PropType<import("./utils").Point>;
            required: true;
        };
        autoCenter: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        opacity: {
            type: import("vue").PropType<number>;
            default: number;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousemove?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: import("vue").PropType<"canvas" | "video" | "image">;
        required: true;
    };
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    url: {
        type: import("vue").PropType<import("./components/overlay/ground-overlay/index.vue").GroundOverlayUrl>;
        required: true;
    };
    startPoint: {
        type: import("vue").PropType<import("./utils").Point>;
        required: true;
    };
    endPoint: {
        type: import("vue").PropType<import("./utils").Point>;
        required: true;
    };
    autoCenter: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    opacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousemove?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousemove")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousemove", {
    visible: boolean;
    autoCenter: boolean;
    opacity: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            title?: string | undefined;
            height?: 0 | RangeOf2<60, 650> | undefined;
            width?: 0 | RangeOf2<220, 730> | undefined;
            offset?: {
                x: number;
                y: number;
            } | undefined;
            modelValue?: boolean | undefined;
            show?: boolean | undefined;
            maxWidth?: RangeOf2<220, 730> | undefined;
            enableAutoPan?: boolean | undefined;
            enableCloseOnClick?: boolean | undefined;
            key?: string | number | symbol | undefined;
            style?: unknown;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            onOpen?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onClose?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly position: import("./utils").Point;
            onMaximize?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRestore?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onClickclose?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            "onUpdate:show"?: ((...args: any[]) => any) | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "open" | "close" | "maximize" | "restore" | "clickclose" | "update:show", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            title: {
                type: import("vue").PropType<string>;
                default: string;
            };
            height: {
                type: import("vue").PropType<0 | RangeOf2<60, 650>>;
                default: number;
            };
            width: {
                type: import("vue").PropType<0 | RangeOf2<220, 730>>;
                default: number;
            };
            onOpen: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onClose: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            offset: {
                type: import("vue").PropType<{
                    x: number;
                    y: number;
                }>;
                default: () => {
                    x: number;
                    y: number;
                };
            };
            modelValue: {
                type: import("vue").PropType<boolean>;
                default: undefined;
            };
            show: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            position: {
                type: import("vue").PropType<import("./utils").Point>;
                required: true;
            };
            maxWidth: {
                type: import("vue").PropType<RangeOf2<220, 730>>;
                default: number;
            };
            enableAutoPan: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableCloseOnClick: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onMaximize: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onRestore: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onClickclose: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onOpen?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onMaximize?: ((...args: any[]) => any) | undefined;
            onRestore?: ((...args: any[]) => any) | undefined;
            onClickclose?: ((...args: any[]) => any) | undefined;
            "onUpdate:show"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "open" | "close" | "maximize" | "restore" | "clickclose" | "update:show")[], string, {
            title: string;
            height: 0 | RangeOf2<60, 650>;
            width: 0 | RangeOf2<220, 730>;
            offset: {
                x: number;
                y: number;
            };
            modelValue: boolean;
            show: boolean;
            maxWidth: RangeOf2<220, 730>;
            enableAutoPan: boolean;
            enableCloseOnClick: boolean;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        height: {
            type: import("vue").PropType<0 | RangeOf2<60, 650>>;
            default: number;
        };
        width: {
            type: import("vue").PropType<0 | RangeOf2<220, 730>>;
            default: number;
        };
        onOpen: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onClose: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        offset: {
            type: import("vue").PropType<{
                x: number;
                y: number;
            }>;
            default: () => {
                x: number;
                y: number;
            };
        };
        modelValue: {
            type: import("vue").PropType<boolean>;
            default: undefined;
        };
        show: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        position: {
            type: import("vue").PropType<import("./utils").Point>;
            required: true;
        };
        maxWidth: {
            type: import("vue").PropType<RangeOf2<220, 730>>;
            default: number;
        };
        enableAutoPan: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableCloseOnClick: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onMaximize: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onRestore: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onClickclose: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        onMaximize?: ((...args: any[]) => any) | undefined;
        onRestore?: ((...args: any[]) => any) | undefined;
        onClickclose?: ((...args: any[]) => any) | undefined;
        "onUpdate:show"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: import("vue").PropType<string>;
        default: string;
    };
    height: {
        type: import("vue").PropType<0 | RangeOf2<60, 650>>;
        default: number;
    };
    width: {
        type: import("vue").PropType<0 | RangeOf2<220, 730>>;
        default: number;
    };
    onOpen: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onClose: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    offset: {
        type: import("vue").PropType<{
            x: number;
            y: number;
        }>;
        default: () => {
            x: number;
            y: number;
        };
    };
    modelValue: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
    show: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    position: {
        type: import("vue").PropType<import("./utils").Point>;
        required: true;
    };
    maxWidth: {
        type: import("vue").PropType<RangeOf2<220, 730>>;
        default: number;
    };
    enableAutoPan: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableCloseOnClick: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onMaximize: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onRestore: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onClickclose: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onMaximize?: ((...args: any[]) => any) | undefined;
    onRestore?: ((...args: any[]) => any) | undefined;
    onClickclose?: ((...args: any[]) => any) | undefined;
    "onUpdate:show"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "open" | "close" | "maximize" | "restore" | "clickclose" | "update:show")[], "initd" | "unload" | "open" | "close" | "maximize" | "restore" | "clickclose" | "update:show", {
    title: string;
    height: 0 | RangeOf2<60, 650>;
    width: 0 | RangeOf2<220, 730>;
    offset: {
        x: number;
        y: number;
    };
    modelValue: boolean;
    show: boolean;
    maxWidth: RangeOf2<220, 730>;
    enableAutoPan: boolean;
    enableCloseOnClick: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            visible?: boolean | undefined;
            offset?: import("./components/overlay/label/index.vue").LabelOffset | undefined;
            enableMassClear?: boolean | undefined;
            key?: string | number | symbol | undefined;
            style?: import("./components/overlay/label/index.vue").LabelStyle | undefined;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            onClick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMousedown?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseup?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRightclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRemove?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly position: import("./utils").Point;
            readonly content: string;
            readonly zIndex?: number | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup" | "remove", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            style: {
                type: import("vue").PropType<import("./components/overlay/label/index.vue").LabelStyle>;
            };
            onClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMousedown: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseup: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            offset: {
                type: import("vue").PropType<import("./components/overlay/label/index.vue").LabelOffset>;
                default: () => {
                    x: number;
                    y: number;
                };
            };
            onRightclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            enableMassClear: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onRemove: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            position: {
                type: import("vue").PropType<import("./utils").Point>;
                required: true;
            };
            content: {
                type: import("vue").PropType<string>;
                required: true;
            };
            zIndex: {
                type: import("vue").PropType<number>;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRightclick?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup" | "remove")[], string, {
            visible: boolean;
            offset: import("./components/overlay/label/index.vue").LabelOffset;
            enableMassClear: boolean;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        style: {
            type: import("vue").PropType<import("./components/overlay/label/index.vue").LabelStyle>;
        };
        onClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMousedown: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseup: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<import("./components/overlay/label/index.vue").LabelOffset>;
            default: () => {
                x: number;
                y: number;
            };
        };
        onRightclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        enableMassClear: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onRemove: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        position: {
            type: import("vue").PropType<import("./utils").Point>;
            required: true;
        };
        content: {
            type: import("vue").PropType<string>;
            required: true;
        };
        zIndex: {
            type: import("vue").PropType<number>;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousedown?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onMouseup?: ((...args: any[]) => any) | undefined;
        onRightclick?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    style: {
        type: import("vue").PropType<import("./components/overlay/label/index.vue").LabelStyle>;
    };
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousedown: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseup: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<import("./components/overlay/label/index.vue").LabelOffset>;
        default: () => {
            x: number;
            y: number;
        };
    };
    onRightclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    enableMassClear: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onRemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    position: {
        type: import("vue").PropType<import("./utils").Point>;
        required: true;
    };
    content: {
        type: import("vue").PropType<string>;
        required: true;
    };
    zIndex: {
        type: import("vue").PropType<number>;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRightclick?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup" | "remove")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup" | "remove", {
    visible: boolean;
    offset: import("./components/overlay/label/index.vue").LabelOffset;
    enableMassClear: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            visible?: boolean | undefined;
            showRegion?: import("./utils").MapMaskShowRegion | undefined;
            isBuildingMask?: boolean | undefined;
            isMapMask?: boolean | undefined;
            isPoiMask?: boolean | undefined;
            key?: string | number | symbol | undefined;
            style?: unknown;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            readonly path: import("./utils").Point[];
            onClick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMousedown?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseup?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRightclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            path: {
                type: import("vue").PropType<import("./utils").Point[]>;
                required: true;
            };
            onClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMousedown: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseup: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onRightclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            showRegion: {
                type: import("vue").PropType<import("./utils").MapMaskShowRegion>;
                default: string;
            };
            isBuildingMask: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            isMapMask: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            isPoiMask: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRightclick?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup")[], string, {
            visible: boolean;
            showRegion: import("./utils").MapMaskShowRegion;
            isBuildingMask: boolean;
            isMapMask: boolean;
            isPoiMask: boolean;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        path: {
            type: import("vue").PropType<import("./utils").Point[]>;
            required: true;
        };
        onClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMousedown: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseup: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onRightclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        showRegion: {
            type: import("vue").PropType<import("./utils").MapMaskShowRegion>;
            default: string;
        };
        isBuildingMask: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isMapMask: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isPoiMask: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousedown?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onMouseup?: ((...args: any[]) => any) | undefined;
        onRightclick?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    path: {
        type: import("vue").PropType<import("./utils").Point[]>;
        required: true;
    };
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousedown: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseup: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onRightclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    showRegion: {
        type: import("vue").PropType<import("./utils").MapMaskShowRegion>;
        default: string;
    };
    isBuildingMask: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMapMask: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isPoiMask: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRightclick?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup", {
    visible: boolean;
    showRegion: import("./utils").MapMaskShowRegion;
    isBuildingMask: boolean;
    isMapMask: boolean;
    isPoiMask: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            title?: string | undefined;
            visible?: boolean | undefined;
            offset?: import("./components/overlay/marker/index.vue").MarkerOffset | undefined;
            enableDragging?: boolean | undefined;
            enableMassClear?: boolean | undefined;
            enableClicking?: boolean | undefined;
            raiseOnDrag?: boolean | undefined;
            draggingCursor?: string | undefined;
            rotation?: number | undefined;
            key?: string | number | symbol | undefined;
            style?: unknown;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            onDragend?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDragstart?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onClick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMousedown?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseup?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRightclick?: ((...args: any[]) => any) | undefined;
            onDragging?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRemove?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly position: import("./utils").Point;
            readonly zIndex?: number | undefined;
            readonly icon?: import("./hooks").MarkerIcons | import("./components/overlay/marker/index.vue").MarkerCustomIcon | undefined;
            onInfowindowclose?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onInfowindowopen?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly onRightClick?: import("./utils").Callback | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "dragstart" | "dragging" | "dragend" | "mousedown" | "mouseup" | "remove" | "infowindowclose" | "infowindowopen", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            title: {
                type: import("vue").PropType<string>;
                default: string;
            };
            onDragend: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDragstart: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMousedown: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseup: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            offset: {
                type: import("vue").PropType<import("./components/overlay/marker/index.vue").MarkerOffset>;
                default: () => {
                    x: number;
                    y: number;
                };
            };
            enableDragging: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onDragging: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            enableMassClear: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onRemove: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            enableClicking: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            position: {
                type: import("vue").PropType<import("./utils").Point>;
                required: true;
            };
            zIndex: {
                type: import("vue").PropType<number>;
            };
            icon: {
                type: import("vue").PropType<import("./hooks").MarkerIcons | import("./components/overlay/marker/index.vue").MarkerCustomIcon>;
            };
            raiseOnDrag: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            draggingCursor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            rotation: {
                type: import("vue").PropType<number>;
                default: number;
            };
            onInfowindowclose: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onInfowindowopen: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onRightClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onDragend?: ((...args: any[]) => any) | undefined;
            onDragstart?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRightclick?: ((...args: any[]) => any) | undefined;
            onDragging?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            onInfowindowclose?: ((...args: any[]) => any) | undefined;
            onInfowindowopen?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "dragstart" | "dragging" | "dragend" | "mousedown" | "mouseup" | "remove" | "infowindowclose" | "infowindowopen")[], string, {
            title: string;
            visible: boolean;
            offset: import("./components/overlay/marker/index.vue").MarkerOffset;
            enableDragging: boolean;
            enableMassClear: boolean;
            enableClicking: boolean;
            raiseOnDrag: boolean;
            draggingCursor: string;
            rotation: number;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onDragend: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDragstart: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMousedown: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseup: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<import("./components/overlay/marker/index.vue").MarkerOffset>;
            default: () => {
                x: number;
                y: number;
            };
        };
        enableDragging: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onDragging: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        enableMassClear: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onRemove: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        enableClicking: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        position: {
            type: import("vue").PropType<import("./utils").Point>;
            required: true;
        };
        zIndex: {
            type: import("vue").PropType<number>;
        };
        icon: {
            type: import("vue").PropType<import("./hooks").MarkerIcons | import("./components/overlay/marker/index.vue").MarkerCustomIcon>;
        };
        raiseOnDrag: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        draggingCursor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        rotation: {
            type: import("vue").PropType<number>;
            default: number;
        };
        onInfowindowclose: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onInfowindowopen: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onRightClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onDragend?: ((...args: any[]) => any) | undefined;
        onDragstart?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousedown?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onMouseup?: ((...args: any[]) => any) | undefined;
        onRightclick?: ((...args: any[]) => any) | undefined;
        onDragging?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
        onInfowindowclose?: ((...args: any[]) => any) | undefined;
        onInfowindowopen?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onDragend: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDragstart: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousedown: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseup: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<import("./components/overlay/marker/index.vue").MarkerOffset>;
        default: () => {
            x: number;
            y: number;
        };
    };
    enableDragging: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onDragging: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    enableMassClear: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onRemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    enableClicking: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    position: {
        type: import("vue").PropType<import("./utils").Point>;
        required: true;
    };
    zIndex: {
        type: import("vue").PropType<number>;
    };
    icon: {
        type: import("vue").PropType<import("./hooks").MarkerIcons | import("./components/overlay/marker/index.vue").MarkerCustomIcon>;
    };
    raiseOnDrag: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    draggingCursor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    rotation: {
        type: import("vue").PropType<number>;
        default: number;
    };
    onInfowindowclose: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onInfowindowopen: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onRightClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onDragend?: ((...args: any[]) => any) | undefined;
    onDragstart?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRightclick?: ((...args: any[]) => any) | undefined;
    onDragging?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    onInfowindowclose?: ((...args: any[]) => any) | undefined;
    onInfowindowopen?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "dragstart" | "dragging" | "dragend" | "mousedown" | "mouseup" | "remove" | "infowindowclose" | "infowindowopen")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "dragstart" | "dragging" | "dragend" | "mousedown" | "mouseup" | "remove" | "infowindowclose" | "infowindowopen", {
    title: string;
    visible: boolean;
    offset: import("./components/overlay/marker/index.vue").MarkerOffset;
    enableDragging: boolean;
    enableMassClear: boolean;
    enableClicking: boolean;
    raiseOnDrag: boolean;
    draggingCursor: string;
    rotation: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            size?: number | undefined;
            visible?: boolean | undefined;
            fillColor?: string | undefined;
            fillOpacity?: number | undefined;
            enableMassClear?: boolean | undefined;
            shape?: import("./components/overlay/marker3d/index.vue").Marker3dShape | undefined;
            key?: string | number | symbol | undefined;
            style?: unknown;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            onClick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMousedown?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseup?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly height: number;
            onRightclick?: ((...args: any[]) => any) | undefined;
            onRemove?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly position: import("./utils").Point;
            readonly icon?: import("./components/overlay/marker3d/index.vue").Marker3dCustomIcon | undefined;
            readonly onRightClick?: import("./utils").Callback | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup" | "remove", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            onClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMousedown: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseup: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            height: {
                type: import("vue").PropType<number>;
                required: true;
            };
            size: {
                type: import("vue").PropType<number>;
                default: number;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            fillColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            fillOpacity: {
                type: import("vue").PropType<number>;
                default: number;
            };
            enableMassClear: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onRemove: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            position: {
                type: import("vue").PropType<import("./utils").Point>;
                required: true;
            };
            icon: {
                type: import("vue").PropType<import("./components/overlay/marker3d/index.vue").Marker3dCustomIcon>;
            };
            onRightClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            shape: {
                type: import("vue").PropType<import("./components/overlay/marker3d/index.vue").Marker3dShape>;
                default: string;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRightclick?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup" | "remove")[], string, {
            size: number;
            visible: boolean;
            fillColor: string;
            fillOpacity: number;
            enableMassClear: boolean;
            shape: import("./components/overlay/marker3d/index.vue").Marker3dShape;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        onClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMousedown: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseup: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        height: {
            type: import("vue").PropType<number>;
            required: true;
        };
        size: {
            type: import("vue").PropType<number>;
            default: number;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        fillColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        fillOpacity: {
            type: import("vue").PropType<number>;
            default: number;
        };
        enableMassClear: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onRemove: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        position: {
            type: import("vue").PropType<import("./utils").Point>;
            required: true;
        };
        icon: {
            type: import("vue").PropType<import("./components/overlay/marker3d/index.vue").Marker3dCustomIcon>;
        };
        onRightClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        shape: {
            type: import("vue").PropType<import("./components/overlay/marker3d/index.vue").Marker3dShape>;
            default: string;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousedown?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onMouseup?: ((...args: any[]) => any) | undefined;
        onRightclick?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousedown: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseup: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    height: {
        type: import("vue").PropType<number>;
        required: true;
    };
    size: {
        type: import("vue").PropType<number>;
        default: number;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    fillColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    fillOpacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    enableMassClear: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onRemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    position: {
        type: import("vue").PropType<import("./utils").Point>;
        required: true;
    };
    icon: {
        type: import("vue").PropType<import("./components/overlay/marker3d/index.vue").Marker3dCustomIcon>;
    };
    onRightClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    shape: {
        type: import("vue").PropType<import("./components/overlay/marker3d/index.vue").Marker3dShape>;
        default: string;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRightclick?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup" | "remove")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "rightclick" | "mousedown" | "mouseup" | "remove", {
    size: number;
    visible: boolean;
    fillColor: string;
    fillOpacity: number;
    enableMassClear: boolean;
    shape: import("./components/overlay/marker3d/index.vue").Marker3dShape;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            visible?: boolean | undefined;
            fillColor?: string | undefined;
            fillOpacity?: number | undefined;
            strokeColor?: string | undefined;
            strokeWeight?: number | undefined;
            strokeOpacity?: number | undefined;
            strokeStyle?: import("./utils").StrokeStyle | undefined;
            geodesic?: boolean | undefined;
            clip?: boolean | undefined;
            autoCenter?: boolean | undefined;
            key?: string | number | symbol | undefined;
            style?: unknown;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            readonly path: string[] | import("./utils").Point[];
            onClick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMousedown?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseup?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly enableMassClear?: boolean | undefined;
            onRemove?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onLineupdate?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly enableEditing?: boolean | undefined;
            readonly enableClicking?: boolean | undefined;
            readonly isBoundary?: boolean | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            path: {
                type: import("vue").PropType<string[] | import("./utils").Point[]>;
                required: true;
            };
            onClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMousedown: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseup: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            fillColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            fillOpacity: {
                type: import("vue").PropType<number>;
                default: number;
            };
            strokeColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            strokeWeight: {
                type: import("vue").PropType<number>;
                default: number;
            };
            strokeOpacity: {
                type: import("vue").PropType<number>;
                default: number;
            };
            strokeStyle: {
                type: import("vue").PropType<import("./utils").StrokeStyle>;
                default: string;
            };
            enableMassClear: {
                type: import("vue").PropType<boolean>;
            };
            onRemove: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onLineupdate: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            enableEditing: {
                type: import("vue").PropType<boolean>;
            };
            enableClicking: {
                type: import("vue").PropType<boolean>;
            };
            geodesic: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            clip: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            autoCenter: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            isBoundary: {
                type: import("vue").PropType<boolean>;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            onLineupdate?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], string, {
            visible: boolean;
            fillColor: string;
            fillOpacity: number;
            strokeColor: string;
            strokeWeight: number;
            strokeOpacity: number;
            strokeStyle: import("./utils").StrokeStyle;
            geodesic: boolean;
            clip: boolean;
            autoCenter: boolean;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        path: {
            type: import("vue").PropType<string[] | import("./utils").Point[]>;
            required: true;
        };
        onClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMousedown: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseup: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        fillColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        fillOpacity: {
            type: import("vue").PropType<number>;
            default: number;
        };
        strokeColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        strokeWeight: {
            type: import("vue").PropType<number>;
            default: number;
        };
        strokeOpacity: {
            type: import("vue").PropType<number>;
            default: number;
        };
        strokeStyle: {
            type: import("vue").PropType<import("./utils").StrokeStyle>;
            default: string;
        };
        enableMassClear: {
            type: import("vue").PropType<boolean>;
        };
        onRemove: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onLineupdate: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        enableEditing: {
            type: import("vue").PropType<boolean>;
        };
        enableClicking: {
            type: import("vue").PropType<boolean>;
        };
        geodesic: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clip: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        autoCenter: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isBoundary: {
            type: import("vue").PropType<boolean>;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousedown?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onMouseup?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
        onLineupdate?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    path: {
        type: import("vue").PropType<string[] | import("./utils").Point[]>;
        required: true;
    };
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousedown: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseup: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    fillColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    fillOpacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    strokeWeight: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeOpacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeStyle: {
        type: import("vue").PropType<import("./utils").StrokeStyle>;
        default: string;
    };
    enableMassClear: {
        type: import("vue").PropType<boolean>;
    };
    onRemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onLineupdate: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    enableEditing: {
        type: import("vue").PropType<boolean>;
    };
    enableClicking: {
        type: import("vue").PropType<boolean>;
    };
    geodesic: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    clip: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    autoCenter: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isBoundary: {
        type: import("vue").PropType<boolean>;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    onLineupdate?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", {
    visible: boolean;
    fillColor: string;
    fillOpacity: number;
    strokeColor: string;
    strokeWeight: number;
    strokeOpacity: number;
    strokeStyle: import("./utils").StrokeStyle;
    geodesic: boolean;
    clip: boolean;
    autoCenter: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            visible?: boolean | undefined;
            strokeColor?: string | undefined;
            strokeWeight?: number | undefined;
            strokeOpacity?: number | undefined;
            strokeStyle?: import("./utils").StrokeStyle | undefined;
            enableMassClear?: boolean | undefined;
            enableEditing?: boolean | undefined;
            enableClicking?: boolean | undefined;
            geodesic?: boolean | undefined;
            clip?: boolean | undefined;
            linkRight?: boolean | undefined;
            key?: string | number | symbol | undefined;
            style?: unknown;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            readonly path: import("./utils").Point[];
            onClick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMousedown?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseup?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRemove?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onLineupdate?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            path: {
                type: import("vue").PropType<import("./utils").Point[]>;
                required: true;
            };
            onClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMousedown: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseup: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            strokeColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            strokeWeight: {
                type: import("vue").PropType<number>;
                default: number;
            };
            strokeOpacity: {
                type: import("vue").PropType<number>;
                default: number;
            };
            strokeStyle: {
                type: import("vue").PropType<import("./utils").StrokeStyle>;
                default: string;
            };
            enableMassClear: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onRemove: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onLineupdate: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            enableEditing: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableClicking: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            geodesic: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            clip: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            linkRight: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            onLineupdate?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], string, {
            visible: boolean;
            strokeColor: string;
            strokeWeight: number;
            strokeOpacity: number;
            strokeStyle: import("./utils").StrokeStyle;
            enableMassClear: boolean;
            enableEditing: boolean;
            enableClicking: boolean;
            geodesic: boolean;
            clip: boolean;
            linkRight: boolean;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        path: {
            type: import("vue").PropType<import("./utils").Point[]>;
            required: true;
        };
        onClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMousedown: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseup: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        strokeColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        strokeWeight: {
            type: import("vue").PropType<number>;
            default: number;
        };
        strokeOpacity: {
            type: import("vue").PropType<number>;
            default: number;
        };
        strokeStyle: {
            type: import("vue").PropType<import("./utils").StrokeStyle>;
            default: string;
        };
        enableMassClear: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onRemove: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onLineupdate: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        enableEditing: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableClicking: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        geodesic: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        clip: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        linkRight: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousedown?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onMouseup?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
        onLineupdate?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    path: {
        type: import("vue").PropType<import("./utils").Point[]>;
        required: true;
    };
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousedown: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseup: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    strokeColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    strokeWeight: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeOpacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    strokeStyle: {
        type: import("vue").PropType<import("./utils").StrokeStyle>;
        default: string;
    };
    enableMassClear: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onRemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onLineupdate: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    enableEditing: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableClicking: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    geodesic: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    clip: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    linkRight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    onLineupdate?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", {
    visible: boolean;
    strokeColor: string;
    strokeWeight: number;
    strokeOpacity: number;
    strokeStyle: import("./utils").StrokeStyle;
    enableMassClear: boolean;
    enableEditing: boolean;
    enableClicking: boolean;
    geodesic: boolean;
    clip: boolean;
    linkRight: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            visible?: boolean | undefined;
            enableMassClear?: boolean | undefined;
            autoCenter?: boolean | undefined;
            topFillColor?: string | undefined;
            topFillOpacity?: number | undefined;
            sideFillColor?: string | undefined;
            sideFillOpacity?: number | undefined;
            key?: string | number | symbol | undefined;
            style?: unknown;
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            readonly path: string[] | import("./utils").Point[];
            onClick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onDblclick?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMousedown?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseout?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseover?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onMouseup?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onRemove?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            onLineupdate?: (import("./utils").Callback & ((...args: any[]) => any)) | undefined;
            readonly isBoundary?: boolean | undefined;
            readonly altitude: number;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: (event: "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            path: {
                type: import("vue").PropType<string[] | import("./utils").Point[]>;
                required: true;
            };
            onClick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onDblclick: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMousedown: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseout: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseover: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onMouseup: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            visible: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            enableMassClear: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            onRemove: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            onLineupdate: {
                type: import("vue").PropType<import("./utils").Callback>;
            };
            autoCenter: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            isBoundary: {
                type: import("vue").PropType<boolean>;
            };
            altitude: {
                type: import("vue").PropType<number>;
                required: true;
            };
            topFillColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            topFillOpacity: {
                type: import("vue").PropType<number>;
                default: number;
            };
            sideFillColor: {
                type: import("vue").PropType<string>;
                default: string;
            };
            sideFillOpacity: {
                type: import("vue").PropType<number>;
                default: number;
            };
        }>> & {
            onInitd?: ((...args: any[]) => any) | undefined;
            onUnload?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onDblclick?: ((...args: any[]) => any) | undefined;
            onMousedown?: ((...args: any[]) => any) | undefined;
            onMouseout?: ((...args: any[]) => any) | undefined;
            onMouseover?: ((...args: any[]) => any) | undefined;
            onMouseup?: ((...args: any[]) => any) | undefined;
            onRemove?: ((...args: any[]) => any) | undefined;
            onLineupdate?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], string, {
            visible: boolean;
            enableMassClear: boolean;
            autoCenter: boolean;
            topFillColor: string;
            topFillOpacity: number;
            sideFillColor: string;
            sideFillOpacity: number;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        path: {
            type: import("vue").PropType<string[] | import("./utils").Point[]>;
            required: true;
        };
        onClick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onDblclick: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMousedown: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseout: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseover: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onMouseup: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        enableMassClear: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onRemove: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        onLineupdate: {
            type: import("vue").PropType<import("./utils").Callback>;
        };
        autoCenter: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isBoundary: {
            type: import("vue").PropType<boolean>;
        };
        altitude: {
            type: import("vue").PropType<number>;
            required: true;
        };
        topFillColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        topFillOpacity: {
            type: import("vue").PropType<number>;
            default: number;
        };
        sideFillColor: {
            type: import("vue").PropType<string>;
            default: string;
        };
        sideFillOpacity: {
            type: import("vue").PropType<number>;
            default: number;
        };
    }>> & {
        onInitd?: ((...args: any[]) => any) | undefined;
        onUnload?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onDblclick?: ((...args: any[]) => any) | undefined;
        onMousedown?: ((...args: any[]) => any) | undefined;
        onMouseout?: ((...args: any[]) => any) | undefined;
        onMouseover?: ((...args: any[]) => any) | undefined;
        onMouseup?: ((...args: any[]) => any) | undefined;
        onRemove?: ((...args: any[]) => any) | undefined;
        onLineupdate?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    path: {
        type: import("vue").PropType<string[] | import("./utils").Point[]>;
        required: true;
    };
    onClick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onDblclick: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMousedown: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseout: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseover: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onMouseup: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    enableMassClear: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onRemove: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    onLineupdate: {
        type: import("vue").PropType<import("./utils").Callback>;
    };
    autoCenter: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isBoundary: {
        type: import("vue").PropType<boolean>;
    };
    altitude: {
        type: import("vue").PropType<number>;
        required: true;
    };
    topFillColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    topFillOpacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
    sideFillColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    sideFillOpacity: {
        type: import("vue").PropType<number>;
        default: number;
    };
}>> & {
    onInitd?: ((...args: any[]) => any) | undefined;
    onUnload?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onDblclick?: ((...args: any[]) => any) | undefined;
    onMousedown?: ((...args: any[]) => any) | undefined;
    onMouseout?: ((...args: any[]) => any) | undefined;
    onMouseover?: ((...args: any[]) => any) | undefined;
    onMouseup?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    onLineupdate?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate")[], "initd" | "unload" | "mouseover" | "mouseout" | "click" | "dblclick" | "mousedown" | "mouseup" | "remove" | "lineupdate", {
    visible: boolean;
    enableMassClear: boolean;
    autoCenter: boolean;
    topFillColor: string;
    topFillOpacity: number;
    sideFillColor: string;
    sideFillOpacity: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
})))[];
export default _default;
