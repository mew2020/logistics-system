import { noop } from './helper';

const BMapScriptLoaderWrapper = {};
function getScriptAsync({ key, src, addCalToWindow = false, exportGetter = noop }) {
    const exported = exportGetter();
    if (!BMapScriptLoaderWrapper[key] && !exported) {
        BMapScriptLoaderWrapper[key] = new Promise((resolve, reject) => {
            const script = document.createElement('script');
            const cal = () => {
                resolve(exportGetter());
                window.document.body.removeChild(script);
            };
            if (addCalToWindow) {
                window[key] = cal;
            }
            else {
                script.onload = function () {
                    if (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete') {
                        script.onload = null;
                        cal();
                    }
                };
            }
            script.src = src;
            script.type = 'text/javascript';
            script.defer = true;
            script.onerror = reject;
            document.body.appendChild(script);
        });
    }
    else if (exported !== undefined) {
        return Promise.resolve(exported);
    }
    return BMapScriptLoaderWrapper[key];
}

export { BMapScriptLoaderWrapper, getScriptAsync as default };
