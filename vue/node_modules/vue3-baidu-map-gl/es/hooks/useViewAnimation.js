import { ref, watch, onUnmounted } from 'vue';

// FIXME: 取消动画后再次开始动画, 地图上 pio 不消失, 可能是地图本身 bug
function useViewAnimation(map, options) {
    options = options || {};
    options.disableDragging = options.disableDragging !== undefined ? false : true;
    const status = ref('INITIAL');
    // 保存未初始化前的事件监听
    const eventListener = {
        animationcancel: [() => (status.value = 'INITIAL')],
        animationend: [() => (status.value = 'INITIAL')],
        animationstart: [() => (status.value = 'PLAYING')]
    };
    let mapComponentInstance;
    let mapInstance;
    let initd = false;
    watch(() => map.value, (n) => {
        mapComponentInstance = n;
    });
    const syncDragging = () => {
        const { enableDragging } = mapComponentInstance.getBaseMapOptions();
        mapComponentInstance.setDragging(enableDragging);
    };
    const defaultValue = {
        addEventListener(event, cal) {
            if (!eventListener[event]) {
                eventListener[event] = [];
            }
            eventListener[event].push(cal);
        },
        removeEventListener(event, cal) {
            const subs = eventListener[event];
            if (subs) {
                if (!cal) {
                    eventListener[event] = [];
                }
                else {
                    for (let i = subs.length; i >= 0; i--) {
                        if (subs[i] === cal) {
                            subs.splice(i, 1);
                        }
                    }
                }
            }
        }
    };
    let viewAnimation = defaultValue;
    const createViewAnimation = (keyFrames) => {
        const { loop, duration, delay } = options;
        for (const keyFrame of keyFrames) {
            if (keyFrame.center) {
                const { lng, lat } = keyFrame.center;
                keyFrame.center = new BMapGL.Point(lng, lat);
            }
        }
        viewAnimation = new BMapGL.ViewAnimation(keyFrames, {
            duration,
            delay,
            interation: loop
        });
        for (const eventKey of Object.keys(eventListener)) {
            const events = eventListener[eventKey];
            if (events && events.length) {
                events.forEach((cal) => {
                    viewAnimation.addEventListener(eventKey, cal);
                });
            }
        }
        initd = true;
    };
    const start = () => {
        if (initd && status.value !== 'PLAYING') {
            mapInstance = mapComponentInstance.getMapInstance();
            mapInstance.startViewAnimation(viewAnimation);
            mapComponentInstance.setDragging(!options.disableDragging);
        }
    };
    const cancel = () => {
        if (initd && status.value !== 'INITIAL') {
            viewAnimation._cancel(mapInstance);
            syncDragging();
        }
    };
    const stop = () => {
        if (initd && status.value === 'PLAYING') {
            viewAnimation._pause();
            status.value = 'STOPPING';
        }
    };
    const proceed = () => {
        if (initd && status.value === 'STOPPING') {
            viewAnimation._continue();
            status.value = 'PLAYING';
        }
    };
    onUnmounted(() => {
        try {
            if (viewAnimation && status.value == 'INITIAL') {
                mapInstance = mapComponentInstance.getMapInstance();
                viewAnimation._cancel(mapInstance);
                syncDragging();
            }
        }
        catch (e) {
            return false;
        }
    });
    return {
        viewAnimation,
        start,
        cancel,
        stop,
        proceed,
        status,
        setKeyFrames: createViewAnimation
    };
}

export { useViewAnimation };
