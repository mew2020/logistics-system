import { ref } from 'vue';
import { error } from '../utils';

var CoordinatesFromType;
(function (CoordinatesFromType) {
    /**
     *  WGS84坐标（GPS标准坐标）
     */
    CoordinatesFromType[CoordinatesFromType["COORDINATES_WGS84"] = 1] = "COORDINATES_WGS84";
    /**
     *  WGS84的平面墨卡托坐标（搜狗地图坐标）
     */
    CoordinatesFromType[CoordinatesFromType["COORDINATES_WGS84_MC"] = 2] = "COORDINATES_WGS84_MC";
    /**
     * GCJ02坐标(火星坐标)，即高德地图、腾讯地图、谷歌坐标和MapABC等地图使用的坐标；
     */
    CoordinatesFromType[CoordinatesFromType["COORDINATES_GCJ02"] = 3] = "COORDINATES_GCJ02";
    /**
     *  GCJ02的平面墨卡托坐标（火星坐标对应的墨卡托平面坐标）
     */
    CoordinatesFromType[CoordinatesFromType["COORDINATES_GCJ02_MC"] = 4] = "COORDINATES_GCJ02_MC";
    /**
     *  百度地图采用的经纬度坐标（bd09ll）
     */
    CoordinatesFromType[CoordinatesFromType["COORDINATES_BD09"] = 5] = "COORDINATES_BD09";
    /**
     * 百度地图采用的墨卡托平面坐标（bd09mc）
     */
    CoordinatesFromType[CoordinatesFromType["COORDINATES_BD09_MC"] = 6] = "COORDINATES_BD09_MC";
    /**
     * 图吧地图坐标
     */
    CoordinatesFromType[CoordinatesFromType["COORDINATES_MAPBAR"] = 7] = "COORDINATES_MAPBAR";
    /**
     * 51地图坐标
     */
    CoordinatesFromType[CoordinatesFromType["COORDINATES_51"] = 8] = "COORDINATES_51";
})(CoordinatesFromType || (CoordinatesFromType = {}));
var CoordinatesToType;
(function (CoordinatesToType) {
    /**
     * GCJ02坐标(火星坐标)，即高德地图、腾讯地图、谷歌坐标和MapABC等地图使用的坐标；
     */
    CoordinatesToType[CoordinatesToType["COORDINATES_GCJ02"] = 3] = "COORDINATES_GCJ02";
    /**
     * 百度地图采用的经纬度坐标（bd09ll）
     */
    CoordinatesToType[CoordinatesToType["COORDINATES_BD09"] = 5] = "COORDINATES_BD09";
    /**
     * 百度地图采用的墨卡托平面坐标（bd09mc）
     */
    CoordinatesToType[CoordinatesToType["COORDINATES_BD09_MC"] = 6] = "COORDINATES_BD09_MC";
})(CoordinatesToType || (CoordinatesToType = {}));
function usePointConvertor() {
    const result = ref();
    const isLoading = ref(true);
    const isError = ref(false);
    const status = ref();
    let convertor;
    const init = (points, from, to) => {
        if (!points)
            return error('usePointConvertor', 'missing required params: points');
        if (!from)
            return error('usePointConvertor', 'missing required params: from');
        if (!to)
            return error('usePointConvertor', 'missing required params: to');
        if (!points.length)
            return;
        if (!convertor) {
            convertor = new BMapGL.Convertor();
        }
        isLoading.value = true;
        const pointsInstance = points.map((item) => new BMapGL.Point(item.lng, item.lat));
        getConvertor(convertor, pointsInstance, from, to)
            .then((res) => {
            result.value = res.points.map((item) => ({ lng: item.lng, lat: item.lat }));
            status.value = res.status;
            isError.value = false;
        })
            .catch((status) => {
            status.value = status;
            isError.value = true;
        })
            .finally(() => {
            isLoading.value = false;
        });
    };
    return {
        convert: init,
        result,
        isLoading,
        isError,
        status
    };
}
function getConvertor(convertor, point, from, to) {
    return new Promise((resolve, reject) => {
        convertor.translate(point, from, to, (res) => {
            if (res.status === 0)
                resolve(res);
            else
                reject(res.status);
        });
    });
}

export { CoordinatesFromType, CoordinatesToType, usePointConvertor };
