import { ref, watch, onUnmounted } from 'vue';
import { proxyValue } from '../utils';

const statusMap = {
    1: 'PLAYING',
    2: 'INITIAL',
    3: 'STOPPING'
};
/**
 * 轨迹动画
 * @param {any} map 地图组件实例引用
 * @param {UseTrackAnimationOptions} options 轨迹动画配置
 * @returns { setPath, start, stop}
 */
function useTrackAnimation(map, options) {
    let instance;
    let pl;
    let mapComponentInstance;
    let mapInstance;
    const status = ref('INITIAL');
    const _options = options || {};
    let prevStartTimeStamp = undefined;
    watch(() => map.value, (n) => {
        mapComponentInstance = n;
    });
    const init = () => {
        if (!instance) {
            mapInstance = mapComponentInstance.getMapInstance();
            instance = new BMapGLLib.TrackAnimation(mapInstance, pl, _options);
            proxyValue(instance, '_status', instance._status, syncState);
        }
    };
    const setPath = (path) => {
        const point = path.map((pathItem) => new BMapGL.Point(pathItem.lng, pathItem.lat));
        pl = new BMapGL.Polyline(point);
        init();
    };
    const start = () => {
        const now = performance.now();
        const _prevStartTimeStamp = prevStartTimeStamp || 0;
        const _delay = _options.delay || 0;
        if (instance && now - _prevStartTimeStamp > _delay && status.value === 'INITIAL') {
            instance.start();
        }
        prevStartTimeStamp = performance.now();
    };
    const cancel = () => {
        if (instance) {
            instance.cancel();
        }
    };
    const stop = () => {
        if (instance) {
            instance.pause();
        }
    };
    const proceed = () => {
        if (instance) {
            instance.continue();
        }
    };
    const syncState = () => {
        if (instance) {
            status.value = statusMap[instance._status];
        }
    };
    onUnmounted(() => {
        if (instance && status.value !== 'INITIAL') {
            instance.cancel();
        }
        // 手动回收内存
        if (mapInstance) {
            mapInstance.removeOverlay(pl);
            pl = null;
        }
    });
    return {
        /**
         * 设置路径动画路径
         */
        setPath,
        /**
         * 开始动画
         */
        start,
        /**
         * 暂停动画
         */
        stop,
        /**
         * 取消动画
         */
        cancel,
        /**
         * 继续播放动画
         */
        proceed,
        /**
         * 动画状态
         */
        status
    };
}

export { useTrackAnimation };
