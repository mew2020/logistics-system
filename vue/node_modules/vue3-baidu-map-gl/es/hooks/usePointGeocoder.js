import { ref } from 'vue';
import { error, isArray } from '../utils';

/**
 * 由地址解析坐标点
 */
function usePointGeocoder(options, cal) {
    options = options || {};
    const result = ref();
    const isLoading = ref(true);
    const isEmpty = ref(true);
    let geocoder;
    const init = (point) => {
        if (!point)
            return error('usePointGeocoder', 'missing required params: point');
        if (!geocoder) {
            geocoder = new BMapGL.Geocoder();
        }
        const isBatch = isArray(point);
        isLoading.value = true;
        (() => {
            if (isBatch) {
                return Promise.all(point.map((item) => getAddress(geocoder, item, options)));
            }
            return getAddress(geocoder, point, options);
        })()
            .then((res) => {
            if (res) {
                if (isBatch) {
                    let emptyCount = 0;
                    result.value = res.map((item) => {
                        emptyCount += +!item;
                        return item;
                    });
                    isEmpty.value = emptyCount === res.length;
                }
                else {
                    result.value = res;
                    isEmpty.value = false;
                }
            }
            else {
                result.value = res;
                isEmpty.value = true;
            }
            cal && cal(result);
        })
            .catch(() => {
            isEmpty.value = true;
            result.value = undefined;
        })
            .finally(() => {
            isLoading.value = false;
        });
    };
    return {
        get: init,
        result,
        isLoading,
        isEmpty
    };
}
function getAddress(geocoder, point, options) {
    return new Promise((resolve) => {
        geocoder.getLocation(new BMapGL.Point(point.lng, point.lat), (res) => {
            if (res)
                resolve(res);
            else
                resolve(null);
        }, options);
    });
}

export { usePointGeocoder };
